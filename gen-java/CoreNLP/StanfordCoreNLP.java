/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package CoreNLP;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-22")
public class StanfordCoreNLP {

  public interface Iface {

    public void ping() throws org.apache.thrift.TException;

    public void zip() throws org.apache.thrift.TException;

    public List<ParseTree> parse_text(String text, List<String> outputFormat) throws org.apache.thrift.TException;

    public ParseTree parse_tokens(List<String> tokens, List<String> outputFormat) throws org.apache.thrift.TException;

    public ParseTree parse_tagged_sentence(String taggedSentence, List<String> outputFormat, String divider) throws org.apache.thrift.TException;

    public String lexicalize_parse_tree(String tree) throws org.apache.thrift.TException;

    public List<NamedEntity> get_entities_from_text(String text) throws org.apache.thrift.TException;

    public List<NamedEntity> get_entities_from_tokens(List<String> tokens) throws org.apache.thrift.TException;

    public List<NamedEntity> get_entities_from_trees(List<String> trees) throws org.apache.thrift.TException;

    public List<String> resolve_coreferences_in_text(String text) throws org.apache.thrift.TException;

    public List<String> resolve_coreferences_in_tokenized_sentences(List<String> sentencesWithTokensSeparatedBySpace) throws org.apache.thrift.TException;

    public List<String> resolve_coreferences_in_trees(List<String> trees) throws org.apache.thrift.TException;

    public List<String> evaluate_tregex_pattern(String parseTree, String tregexPattern) throws org.apache.thrift.TException;

    public List<List<TaggedToken>> tag_text(String untokenizedText) throws org.apache.thrift.TException;

    public List<TaggedToken> tag_tokenized_sentence(List<String> tokenizedSentence) throws org.apache.thrift.TException;

    public List<TaggedToken> tag_partially_tagged_tokenized_sentence(String ptaggedtokenizedSentence, String divider) throws org.apache.thrift.TException;

    public String untokenize_sentence(List<String> sentenceTokens) throws org.apache.thrift.TException;

    public List<List<String>> tokenize_text(String arbitraryText) throws org.apache.thrift.TException;

    public ParseTree sr_parse_tagged_sentence(String taggedSentence, List<String> outputFormat, String divider) throws org.apache.thrift.TException;

    public List<ParseTree> sr_parse_text(String untokenizedText, List<String> outputFormat) throws org.apache.thrift.TException;

    public ParseTree sr_parse_tokens(List<String> tokenizedSentence, List<String> outputFormat) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void zip(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void parse_text(String text, List<String> outputFormat, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void parse_tokens(List<String> tokens, List<String> outputFormat, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void parse_tagged_sentence(String taggedSentence, List<String> outputFormat, String divider, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void lexicalize_parse_tree(String tree, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_entities_from_text(String text, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_entities_from_tokens(List<String> tokens, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get_entities_from_trees(List<String> trees, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void resolve_coreferences_in_text(String text, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void resolve_coreferences_in_tokenized_sentences(List<String> sentencesWithTokensSeparatedBySpace, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void resolve_coreferences_in_trees(List<String> trees, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void evaluate_tregex_pattern(String parseTree, String tregexPattern, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void tag_text(String untokenizedText, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void tag_tokenized_sentence(List<String> tokenizedSentence, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void tag_partially_tagged_tokenized_sentence(String ptaggedtokenizedSentence, String divider, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void untokenize_sentence(List<String> sentenceTokens, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void tokenize_text(String arbitraryText, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sr_parse_tagged_sentence(String taggedSentence, List<String> outputFormat, String divider, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sr_parse_text(String untokenizedText, List<String> outputFormat, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sr_parse_tokens(List<String> tokenizedSentence, List<String> outputFormat, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void ping() throws org.apache.thrift.TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public void recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      return;
    }

    public void zip() throws org.apache.thrift.TException
    {
      send_zip();
    }

    public void send_zip() throws org.apache.thrift.TException
    {
      zip_args args = new zip_args();
      sendBase("zip", args);
    }

    public List<ParseTree> parse_text(String text, List<String> outputFormat) throws org.apache.thrift.TException
    {
      send_parse_text(text, outputFormat);
      return recv_parse_text();
    }

    public void send_parse_text(String text, List<String> outputFormat) throws org.apache.thrift.TException
    {
      parse_text_args args = new parse_text_args();
      args.setText(text);
      args.setOutputFormat(outputFormat);
      sendBase("parse_text", args);
    }

    public List<ParseTree> recv_parse_text() throws org.apache.thrift.TException
    {
      parse_text_result result = new parse_text_result();
      receiveBase(result, "parse_text");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "parse_text failed: unknown result");
    }

    public ParseTree parse_tokens(List<String> tokens, List<String> outputFormat) throws org.apache.thrift.TException
    {
      send_parse_tokens(tokens, outputFormat);
      return recv_parse_tokens();
    }

    public void send_parse_tokens(List<String> tokens, List<String> outputFormat) throws org.apache.thrift.TException
    {
      parse_tokens_args args = new parse_tokens_args();
      args.setTokens(tokens);
      args.setOutputFormat(outputFormat);
      sendBase("parse_tokens", args);
    }

    public ParseTree recv_parse_tokens() throws org.apache.thrift.TException
    {
      parse_tokens_result result = new parse_tokens_result();
      receiveBase(result, "parse_tokens");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "parse_tokens failed: unknown result");
    }

    public ParseTree parse_tagged_sentence(String taggedSentence, List<String> outputFormat, String divider) throws org.apache.thrift.TException
    {
      send_parse_tagged_sentence(taggedSentence, outputFormat, divider);
      return recv_parse_tagged_sentence();
    }

    public void send_parse_tagged_sentence(String taggedSentence, List<String> outputFormat, String divider) throws org.apache.thrift.TException
    {
      parse_tagged_sentence_args args = new parse_tagged_sentence_args();
      args.setTaggedSentence(taggedSentence);
      args.setOutputFormat(outputFormat);
      args.setDivider(divider);
      sendBase("parse_tagged_sentence", args);
    }

    public ParseTree recv_parse_tagged_sentence() throws org.apache.thrift.TException
    {
      parse_tagged_sentence_result result = new parse_tagged_sentence_result();
      receiveBase(result, "parse_tagged_sentence");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "parse_tagged_sentence failed: unknown result");
    }

    public String lexicalize_parse_tree(String tree) throws org.apache.thrift.TException
    {
      send_lexicalize_parse_tree(tree);
      return recv_lexicalize_parse_tree();
    }

    public void send_lexicalize_parse_tree(String tree) throws org.apache.thrift.TException
    {
      lexicalize_parse_tree_args args = new lexicalize_parse_tree_args();
      args.setTree(tree);
      sendBase("lexicalize_parse_tree", args);
    }

    public String recv_lexicalize_parse_tree() throws org.apache.thrift.TException
    {
      lexicalize_parse_tree_result result = new lexicalize_parse_tree_result();
      receiveBase(result, "lexicalize_parse_tree");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "lexicalize_parse_tree failed: unknown result");
    }

    public List<NamedEntity> get_entities_from_text(String text) throws org.apache.thrift.TException
    {
      send_get_entities_from_text(text);
      return recv_get_entities_from_text();
    }

    public void send_get_entities_from_text(String text) throws org.apache.thrift.TException
    {
      get_entities_from_text_args args = new get_entities_from_text_args();
      args.setText(text);
      sendBase("get_entities_from_text", args);
    }

    public List<NamedEntity> recv_get_entities_from_text() throws org.apache.thrift.TException
    {
      get_entities_from_text_result result = new get_entities_from_text_result();
      receiveBase(result, "get_entities_from_text");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_entities_from_text failed: unknown result");
    }

    public List<NamedEntity> get_entities_from_tokens(List<String> tokens) throws org.apache.thrift.TException
    {
      send_get_entities_from_tokens(tokens);
      return recv_get_entities_from_tokens();
    }

    public void send_get_entities_from_tokens(List<String> tokens) throws org.apache.thrift.TException
    {
      get_entities_from_tokens_args args = new get_entities_from_tokens_args();
      args.setTokens(tokens);
      sendBase("get_entities_from_tokens", args);
    }

    public List<NamedEntity> recv_get_entities_from_tokens() throws org.apache.thrift.TException
    {
      get_entities_from_tokens_result result = new get_entities_from_tokens_result();
      receiveBase(result, "get_entities_from_tokens");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_entities_from_tokens failed: unknown result");
    }

    public List<NamedEntity> get_entities_from_trees(List<String> trees) throws org.apache.thrift.TException
    {
      send_get_entities_from_trees(trees);
      return recv_get_entities_from_trees();
    }

    public void send_get_entities_from_trees(List<String> trees) throws org.apache.thrift.TException
    {
      get_entities_from_trees_args args = new get_entities_from_trees_args();
      args.setTrees(trees);
      sendBase("get_entities_from_trees", args);
    }

    public List<NamedEntity> recv_get_entities_from_trees() throws org.apache.thrift.TException
    {
      get_entities_from_trees_result result = new get_entities_from_trees_result();
      receiveBase(result, "get_entities_from_trees");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_entities_from_trees failed: unknown result");
    }

    public List<String> resolve_coreferences_in_text(String text) throws org.apache.thrift.TException
    {
      send_resolve_coreferences_in_text(text);
      return recv_resolve_coreferences_in_text();
    }

    public void send_resolve_coreferences_in_text(String text) throws org.apache.thrift.TException
    {
      resolve_coreferences_in_text_args args = new resolve_coreferences_in_text_args();
      args.setText(text);
      sendBase("resolve_coreferences_in_text", args);
    }

    public List<String> recv_resolve_coreferences_in_text() throws org.apache.thrift.TException
    {
      resolve_coreferences_in_text_result result = new resolve_coreferences_in_text_result();
      receiveBase(result, "resolve_coreferences_in_text");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resolve_coreferences_in_text failed: unknown result");
    }

    public List<String> resolve_coreferences_in_tokenized_sentences(List<String> sentencesWithTokensSeparatedBySpace) throws org.apache.thrift.TException
    {
      send_resolve_coreferences_in_tokenized_sentences(sentencesWithTokensSeparatedBySpace);
      return recv_resolve_coreferences_in_tokenized_sentences();
    }

    public void send_resolve_coreferences_in_tokenized_sentences(List<String> sentencesWithTokensSeparatedBySpace) throws org.apache.thrift.TException
    {
      resolve_coreferences_in_tokenized_sentences_args args = new resolve_coreferences_in_tokenized_sentences_args();
      args.setSentencesWithTokensSeparatedBySpace(sentencesWithTokensSeparatedBySpace);
      sendBase("resolve_coreferences_in_tokenized_sentences", args);
    }

    public List<String> recv_resolve_coreferences_in_tokenized_sentences() throws org.apache.thrift.TException
    {
      resolve_coreferences_in_tokenized_sentences_result result = new resolve_coreferences_in_tokenized_sentences_result();
      receiveBase(result, "resolve_coreferences_in_tokenized_sentences");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resolve_coreferences_in_tokenized_sentences failed: unknown result");
    }

    public List<String> resolve_coreferences_in_trees(List<String> trees) throws org.apache.thrift.TException
    {
      send_resolve_coreferences_in_trees(trees);
      return recv_resolve_coreferences_in_trees();
    }

    public void send_resolve_coreferences_in_trees(List<String> trees) throws org.apache.thrift.TException
    {
      resolve_coreferences_in_trees_args args = new resolve_coreferences_in_trees_args();
      args.setTrees(trees);
      sendBase("resolve_coreferences_in_trees", args);
    }

    public List<String> recv_resolve_coreferences_in_trees() throws org.apache.thrift.TException
    {
      resolve_coreferences_in_trees_result result = new resolve_coreferences_in_trees_result();
      receiveBase(result, "resolve_coreferences_in_trees");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resolve_coreferences_in_trees failed: unknown result");
    }

    public List<String> evaluate_tregex_pattern(String parseTree, String tregexPattern) throws org.apache.thrift.TException
    {
      send_evaluate_tregex_pattern(parseTree, tregexPattern);
      return recv_evaluate_tregex_pattern();
    }

    public void send_evaluate_tregex_pattern(String parseTree, String tregexPattern) throws org.apache.thrift.TException
    {
      evaluate_tregex_pattern_args args = new evaluate_tregex_pattern_args();
      args.setParseTree(parseTree);
      args.setTregexPattern(tregexPattern);
      sendBase("evaluate_tregex_pattern", args);
    }

    public List<String> recv_evaluate_tregex_pattern() throws org.apache.thrift.TException
    {
      evaluate_tregex_pattern_result result = new evaluate_tregex_pattern_result();
      receiveBase(result, "evaluate_tregex_pattern");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "evaluate_tregex_pattern failed: unknown result");
    }

    public List<List<TaggedToken>> tag_text(String untokenizedText) throws org.apache.thrift.TException
    {
      send_tag_text(untokenizedText);
      return recv_tag_text();
    }

    public void send_tag_text(String untokenizedText) throws org.apache.thrift.TException
    {
      tag_text_args args = new tag_text_args();
      args.setUntokenizedText(untokenizedText);
      sendBase("tag_text", args);
    }

    public List<List<TaggedToken>> recv_tag_text() throws org.apache.thrift.TException
    {
      tag_text_result result = new tag_text_result();
      receiveBase(result, "tag_text");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "tag_text failed: unknown result");
    }

    public List<TaggedToken> tag_tokenized_sentence(List<String> tokenizedSentence) throws org.apache.thrift.TException
    {
      send_tag_tokenized_sentence(tokenizedSentence);
      return recv_tag_tokenized_sentence();
    }

    public void send_tag_tokenized_sentence(List<String> tokenizedSentence) throws org.apache.thrift.TException
    {
      tag_tokenized_sentence_args args = new tag_tokenized_sentence_args();
      args.setTokenizedSentence(tokenizedSentence);
      sendBase("tag_tokenized_sentence", args);
    }

    public List<TaggedToken> recv_tag_tokenized_sentence() throws org.apache.thrift.TException
    {
      tag_tokenized_sentence_result result = new tag_tokenized_sentence_result();
      receiveBase(result, "tag_tokenized_sentence");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "tag_tokenized_sentence failed: unknown result");
    }

    public List<TaggedToken> tag_partially_tagged_tokenized_sentence(String ptaggedtokenizedSentence, String divider) throws org.apache.thrift.TException
    {
      send_tag_partially_tagged_tokenized_sentence(ptaggedtokenizedSentence, divider);
      return recv_tag_partially_tagged_tokenized_sentence();
    }

    public void send_tag_partially_tagged_tokenized_sentence(String ptaggedtokenizedSentence, String divider) throws org.apache.thrift.TException
    {
      tag_partially_tagged_tokenized_sentence_args args = new tag_partially_tagged_tokenized_sentence_args();
      args.setPtaggedtokenizedSentence(ptaggedtokenizedSentence);
      args.setDivider(divider);
      sendBase("tag_partially_tagged_tokenized_sentence", args);
    }

    public List<TaggedToken> recv_tag_partially_tagged_tokenized_sentence() throws org.apache.thrift.TException
    {
      tag_partially_tagged_tokenized_sentence_result result = new tag_partially_tagged_tokenized_sentence_result();
      receiveBase(result, "tag_partially_tagged_tokenized_sentence");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "tag_partially_tagged_tokenized_sentence failed: unknown result");
    }

    public String untokenize_sentence(List<String> sentenceTokens) throws org.apache.thrift.TException
    {
      send_untokenize_sentence(sentenceTokens);
      return recv_untokenize_sentence();
    }

    public void send_untokenize_sentence(List<String> sentenceTokens) throws org.apache.thrift.TException
    {
      untokenize_sentence_args args = new untokenize_sentence_args();
      args.setSentenceTokens(sentenceTokens);
      sendBase("untokenize_sentence", args);
    }

    public String recv_untokenize_sentence() throws org.apache.thrift.TException
    {
      untokenize_sentence_result result = new untokenize_sentence_result();
      receiveBase(result, "untokenize_sentence");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "untokenize_sentence failed: unknown result");
    }

    public List<List<String>> tokenize_text(String arbitraryText) throws org.apache.thrift.TException
    {
      send_tokenize_text(arbitraryText);
      return recv_tokenize_text();
    }

    public void send_tokenize_text(String arbitraryText) throws org.apache.thrift.TException
    {
      tokenize_text_args args = new tokenize_text_args();
      args.setArbitraryText(arbitraryText);
      sendBase("tokenize_text", args);
    }

    public List<List<String>> recv_tokenize_text() throws org.apache.thrift.TException
    {
      tokenize_text_result result = new tokenize_text_result();
      receiveBase(result, "tokenize_text");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "tokenize_text failed: unknown result");
    }

    public ParseTree sr_parse_tagged_sentence(String taggedSentence, List<String> outputFormat, String divider) throws org.apache.thrift.TException
    {
      send_sr_parse_tagged_sentence(taggedSentence, outputFormat, divider);
      return recv_sr_parse_tagged_sentence();
    }

    public void send_sr_parse_tagged_sentence(String taggedSentence, List<String> outputFormat, String divider) throws org.apache.thrift.TException
    {
      sr_parse_tagged_sentence_args args = new sr_parse_tagged_sentence_args();
      args.setTaggedSentence(taggedSentence);
      args.setOutputFormat(outputFormat);
      args.setDivider(divider);
      sendBase("sr_parse_tagged_sentence", args);
    }

    public ParseTree recv_sr_parse_tagged_sentence() throws org.apache.thrift.TException
    {
      sr_parse_tagged_sentence_result result = new sr_parse_tagged_sentence_result();
      receiveBase(result, "sr_parse_tagged_sentence");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sr_parse_tagged_sentence failed: unknown result");
    }

    public List<ParseTree> sr_parse_text(String untokenizedText, List<String> outputFormat) throws org.apache.thrift.TException
    {
      send_sr_parse_text(untokenizedText, outputFormat);
      return recv_sr_parse_text();
    }

    public void send_sr_parse_text(String untokenizedText, List<String> outputFormat) throws org.apache.thrift.TException
    {
      sr_parse_text_args args = new sr_parse_text_args();
      args.setUntokenizedText(untokenizedText);
      args.setOutputFormat(outputFormat);
      sendBase("sr_parse_text", args);
    }

    public List<ParseTree> recv_sr_parse_text() throws org.apache.thrift.TException
    {
      sr_parse_text_result result = new sr_parse_text_result();
      receiveBase(result, "sr_parse_text");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sr_parse_text failed: unknown result");
    }

    public ParseTree sr_parse_tokens(List<String> tokenizedSentence, List<String> outputFormat) throws org.apache.thrift.TException
    {
      send_sr_parse_tokens(tokenizedSentence, outputFormat);
      return recv_sr_parse_tokens();
    }

    public void send_sr_parse_tokens(List<String> tokenizedSentence, List<String> outputFormat) throws org.apache.thrift.TException
    {
      sr_parse_tokens_args args = new sr_parse_tokens_args();
      args.setTokenizedSentence(tokenizedSentence);
      args.setOutputFormat(outputFormat);
      sendBase("sr_parse_tokens", args);
    }

    public ParseTree recv_sr_parse_tokens() throws org.apache.thrift.TException
    {
      sr_parse_tokens_result result = new sr_parse_tokens_result();
      receiveBase(result, "sr_parse_tokens");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sr_parse_tokens failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ping();
      }
    }

    public void zip(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      zip_call method_call = new zip_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class zip_call extends org.apache.thrift.async.TAsyncMethodCall {
      public zip_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("zip", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        zip_args args = new zip_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void parse_text(String text, List<String> outputFormat, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      parse_text_call method_call = new parse_text_call(text, outputFormat, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class parse_text_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String text;
      private List<String> outputFormat;
      public parse_text_call(String text, List<String> outputFormat, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.text = text;
        this.outputFormat = outputFormat;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("parse_text", org.apache.thrift.protocol.TMessageType.CALL, 0));
        parse_text_args args = new parse_text_args();
        args.setText(text);
        args.setOutputFormat(outputFormat);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ParseTree> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_parse_text();
      }
    }

    public void parse_tokens(List<String> tokens, List<String> outputFormat, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      parse_tokens_call method_call = new parse_tokens_call(tokens, outputFormat, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class parse_tokens_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> tokens;
      private List<String> outputFormat;
      public parse_tokens_call(List<String> tokens, List<String> outputFormat, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tokens = tokens;
        this.outputFormat = outputFormat;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("parse_tokens", org.apache.thrift.protocol.TMessageType.CALL, 0));
        parse_tokens_args args = new parse_tokens_args();
        args.setTokens(tokens);
        args.setOutputFormat(outputFormat);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ParseTree getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_parse_tokens();
      }
    }

    public void parse_tagged_sentence(String taggedSentence, List<String> outputFormat, String divider, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      parse_tagged_sentence_call method_call = new parse_tagged_sentence_call(taggedSentence, outputFormat, divider, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class parse_tagged_sentence_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String taggedSentence;
      private List<String> outputFormat;
      private String divider;
      public parse_tagged_sentence_call(String taggedSentence, List<String> outputFormat, String divider, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taggedSentence = taggedSentence;
        this.outputFormat = outputFormat;
        this.divider = divider;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("parse_tagged_sentence", org.apache.thrift.protocol.TMessageType.CALL, 0));
        parse_tagged_sentence_args args = new parse_tagged_sentence_args();
        args.setTaggedSentence(taggedSentence);
        args.setOutputFormat(outputFormat);
        args.setDivider(divider);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ParseTree getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_parse_tagged_sentence();
      }
    }

    public void lexicalize_parse_tree(String tree, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lexicalize_parse_tree_call method_call = new lexicalize_parse_tree_call(tree, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lexicalize_parse_tree_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tree;
      public lexicalize_parse_tree_call(String tree, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tree = tree;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lexicalize_parse_tree", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lexicalize_parse_tree_args args = new lexicalize_parse_tree_args();
        args.setTree(tree);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lexicalize_parse_tree();
      }
    }

    public void get_entities_from_text(String text, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_entities_from_text_call method_call = new get_entities_from_text_call(text, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_entities_from_text_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String text;
      public get_entities_from_text_call(String text, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.text = text;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_entities_from_text", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_entities_from_text_args args = new get_entities_from_text_args();
        args.setText(text);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<NamedEntity> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_entities_from_text();
      }
    }

    public void get_entities_from_tokens(List<String> tokens, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_entities_from_tokens_call method_call = new get_entities_from_tokens_call(tokens, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_entities_from_tokens_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> tokens;
      public get_entities_from_tokens_call(List<String> tokens, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tokens = tokens;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_entities_from_tokens", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_entities_from_tokens_args args = new get_entities_from_tokens_args();
        args.setTokens(tokens);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<NamedEntity> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_entities_from_tokens();
      }
    }

    public void get_entities_from_trees(List<String> trees, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_entities_from_trees_call method_call = new get_entities_from_trees_call(trees, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_entities_from_trees_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> trees;
      public get_entities_from_trees_call(List<String> trees, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.trees = trees;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_entities_from_trees", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_entities_from_trees_args args = new get_entities_from_trees_args();
        args.setTrees(trees);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<NamedEntity> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_entities_from_trees();
      }
    }

    public void resolve_coreferences_in_text(String text, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resolve_coreferences_in_text_call method_call = new resolve_coreferences_in_text_call(text, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resolve_coreferences_in_text_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String text;
      public resolve_coreferences_in_text_call(String text, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.text = text;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resolve_coreferences_in_text", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resolve_coreferences_in_text_args args = new resolve_coreferences_in_text_args();
        args.setText(text);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resolve_coreferences_in_text();
      }
    }

    public void resolve_coreferences_in_tokenized_sentences(List<String> sentencesWithTokensSeparatedBySpace, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resolve_coreferences_in_tokenized_sentences_call method_call = new resolve_coreferences_in_tokenized_sentences_call(sentencesWithTokensSeparatedBySpace, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resolve_coreferences_in_tokenized_sentences_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> sentencesWithTokensSeparatedBySpace;
      public resolve_coreferences_in_tokenized_sentences_call(List<String> sentencesWithTokensSeparatedBySpace, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sentencesWithTokensSeparatedBySpace = sentencesWithTokensSeparatedBySpace;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resolve_coreferences_in_tokenized_sentences", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resolve_coreferences_in_tokenized_sentences_args args = new resolve_coreferences_in_tokenized_sentences_args();
        args.setSentencesWithTokensSeparatedBySpace(sentencesWithTokensSeparatedBySpace);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resolve_coreferences_in_tokenized_sentences();
      }
    }

    public void resolve_coreferences_in_trees(List<String> trees, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resolve_coreferences_in_trees_call method_call = new resolve_coreferences_in_trees_call(trees, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resolve_coreferences_in_trees_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> trees;
      public resolve_coreferences_in_trees_call(List<String> trees, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.trees = trees;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resolve_coreferences_in_trees", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resolve_coreferences_in_trees_args args = new resolve_coreferences_in_trees_args();
        args.setTrees(trees);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resolve_coreferences_in_trees();
      }
    }

    public void evaluate_tregex_pattern(String parseTree, String tregexPattern, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      evaluate_tregex_pattern_call method_call = new evaluate_tregex_pattern_call(parseTree, tregexPattern, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class evaluate_tregex_pattern_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String parseTree;
      private String tregexPattern;
      public evaluate_tregex_pattern_call(String parseTree, String tregexPattern, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.parseTree = parseTree;
        this.tregexPattern = tregexPattern;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("evaluate_tregex_pattern", org.apache.thrift.protocol.TMessageType.CALL, 0));
        evaluate_tregex_pattern_args args = new evaluate_tregex_pattern_args();
        args.setParseTree(parseTree);
        args.setTregexPattern(tregexPattern);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_evaluate_tregex_pattern();
      }
    }

    public void tag_text(String untokenizedText, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tag_text_call method_call = new tag_text_call(untokenizedText, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tag_text_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String untokenizedText;
      public tag_text_call(String untokenizedText, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.untokenizedText = untokenizedText;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tag_text", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tag_text_args args = new tag_text_args();
        args.setUntokenizedText(untokenizedText);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<TaggedToken>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_tag_text();
      }
    }

    public void tag_tokenized_sentence(List<String> tokenizedSentence, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tag_tokenized_sentence_call method_call = new tag_tokenized_sentence_call(tokenizedSentence, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tag_tokenized_sentence_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> tokenizedSentence;
      public tag_tokenized_sentence_call(List<String> tokenizedSentence, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tokenizedSentence = tokenizedSentence;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tag_tokenized_sentence", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tag_tokenized_sentence_args args = new tag_tokenized_sentence_args();
        args.setTokenizedSentence(tokenizedSentence);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TaggedToken> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_tag_tokenized_sentence();
      }
    }

    public void tag_partially_tagged_tokenized_sentence(String ptaggedtokenizedSentence, String divider, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tag_partially_tagged_tokenized_sentence_call method_call = new tag_partially_tagged_tokenized_sentence_call(ptaggedtokenizedSentence, divider, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tag_partially_tagged_tokenized_sentence_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ptaggedtokenizedSentence;
      private String divider;
      public tag_partially_tagged_tokenized_sentence_call(String ptaggedtokenizedSentence, String divider, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ptaggedtokenizedSentence = ptaggedtokenizedSentence;
        this.divider = divider;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tag_partially_tagged_tokenized_sentence", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tag_partially_tagged_tokenized_sentence_args args = new tag_partially_tagged_tokenized_sentence_args();
        args.setPtaggedtokenizedSentence(ptaggedtokenizedSentence);
        args.setDivider(divider);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TaggedToken> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_tag_partially_tagged_tokenized_sentence();
      }
    }

    public void untokenize_sentence(List<String> sentenceTokens, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      untokenize_sentence_call method_call = new untokenize_sentence_call(sentenceTokens, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class untokenize_sentence_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> sentenceTokens;
      public untokenize_sentence_call(List<String> sentenceTokens, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sentenceTokens = sentenceTokens;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("untokenize_sentence", org.apache.thrift.protocol.TMessageType.CALL, 0));
        untokenize_sentence_args args = new untokenize_sentence_args();
        args.setSentenceTokens(sentenceTokens);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_untokenize_sentence();
      }
    }

    public void tokenize_text(String arbitraryText, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      tokenize_text_call method_call = new tokenize_text_call(arbitraryText, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class tokenize_text_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String arbitraryText;
      public tokenize_text_call(String arbitraryText, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.arbitraryText = arbitraryText;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tokenize_text", org.apache.thrift.protocol.TMessageType.CALL, 0));
        tokenize_text_args args = new tokenize_text_args();
        args.setArbitraryText(arbitraryText);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_tokenize_text();
      }
    }

    public void sr_parse_tagged_sentence(String taggedSentence, List<String> outputFormat, String divider, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sr_parse_tagged_sentence_call method_call = new sr_parse_tagged_sentence_call(taggedSentence, outputFormat, divider, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sr_parse_tagged_sentence_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String taggedSentence;
      private List<String> outputFormat;
      private String divider;
      public sr_parse_tagged_sentence_call(String taggedSentence, List<String> outputFormat, String divider, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taggedSentence = taggedSentence;
        this.outputFormat = outputFormat;
        this.divider = divider;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sr_parse_tagged_sentence", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sr_parse_tagged_sentence_args args = new sr_parse_tagged_sentence_args();
        args.setTaggedSentence(taggedSentence);
        args.setOutputFormat(outputFormat);
        args.setDivider(divider);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ParseTree getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sr_parse_tagged_sentence();
      }
    }

    public void sr_parse_text(String untokenizedText, List<String> outputFormat, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sr_parse_text_call method_call = new sr_parse_text_call(untokenizedText, outputFormat, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sr_parse_text_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String untokenizedText;
      private List<String> outputFormat;
      public sr_parse_text_call(String untokenizedText, List<String> outputFormat, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.untokenizedText = untokenizedText;
        this.outputFormat = outputFormat;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sr_parse_text", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sr_parse_text_args args = new sr_parse_text_args();
        args.setUntokenizedText(untokenizedText);
        args.setOutputFormat(outputFormat);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ParseTree> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sr_parse_text();
      }
    }

    public void sr_parse_tokens(List<String> tokenizedSentence, List<String> outputFormat, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sr_parse_tokens_call method_call = new sr_parse_tokens_call(tokenizedSentence, outputFormat, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sr_parse_tokens_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> tokenizedSentence;
      private List<String> outputFormat;
      public sr_parse_tokens_call(List<String> tokenizedSentence, List<String> outputFormat, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tokenizedSentence = tokenizedSentence;
        this.outputFormat = outputFormat;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sr_parse_tokens", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sr_parse_tokens_args args = new sr_parse_tokens_args();
        args.setTokenizedSentence(tokenizedSentence);
        args.setOutputFormat(outputFormat);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ParseTree getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sr_parse_tokens();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("zip", new zip());
      processMap.put("parse_text", new parse_text());
      processMap.put("parse_tokens", new parse_tokens());
      processMap.put("parse_tagged_sentence", new parse_tagged_sentence());
      processMap.put("lexicalize_parse_tree", new lexicalize_parse_tree());
      processMap.put("get_entities_from_text", new get_entities_from_text());
      processMap.put("get_entities_from_tokens", new get_entities_from_tokens());
      processMap.put("get_entities_from_trees", new get_entities_from_trees());
      processMap.put("resolve_coreferences_in_text", new resolve_coreferences_in_text());
      processMap.put("resolve_coreferences_in_tokenized_sentences", new resolve_coreferences_in_tokenized_sentences());
      processMap.put("resolve_coreferences_in_trees", new resolve_coreferences_in_trees());
      processMap.put("evaluate_tregex_pattern", new evaluate_tregex_pattern());
      processMap.put("tag_text", new tag_text());
      processMap.put("tag_tokenized_sentence", new tag_tokenized_sentence());
      processMap.put("tag_partially_tagged_tokenized_sentence", new tag_partially_tagged_tokenized_sentence());
      processMap.put("untokenize_sentence", new untokenize_sentence());
      processMap.put("tokenize_text", new tokenize_text());
      processMap.put("sr_parse_tagged_sentence", new sr_parse_tagged_sentence());
      processMap.put("sr_parse_text", new sr_parse_text());
      processMap.put("sr_parse_tokens", new sr_parse_tokens());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        iface.ping();
        return result;
      }
    }

    public static class zip<I extends Iface> extends org.apache.thrift.ProcessFunction<I, zip_args> {
      public zip() {
        super("zip");
      }

      public zip_args getEmptyArgsInstance() {
        return new zip_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, zip_args args) throws org.apache.thrift.TException {
        iface.zip();
        return null;
      }
    }

    public static class parse_text<I extends Iface> extends org.apache.thrift.ProcessFunction<I, parse_text_args> {
      public parse_text() {
        super("parse_text");
      }

      public parse_text_args getEmptyArgsInstance() {
        return new parse_text_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public parse_text_result getResult(I iface, parse_text_args args) throws org.apache.thrift.TException {
        parse_text_result result = new parse_text_result();
        result.success = iface.parse_text(args.text, args.outputFormat);
        return result;
      }
    }

    public static class parse_tokens<I extends Iface> extends org.apache.thrift.ProcessFunction<I, parse_tokens_args> {
      public parse_tokens() {
        super("parse_tokens");
      }

      public parse_tokens_args getEmptyArgsInstance() {
        return new parse_tokens_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public parse_tokens_result getResult(I iface, parse_tokens_args args) throws org.apache.thrift.TException {
        parse_tokens_result result = new parse_tokens_result();
        result.success = iface.parse_tokens(args.tokens, args.outputFormat);
        return result;
      }
    }

    public static class parse_tagged_sentence<I extends Iface> extends org.apache.thrift.ProcessFunction<I, parse_tagged_sentence_args> {
      public parse_tagged_sentence() {
        super("parse_tagged_sentence");
      }

      public parse_tagged_sentence_args getEmptyArgsInstance() {
        return new parse_tagged_sentence_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public parse_tagged_sentence_result getResult(I iface, parse_tagged_sentence_args args) throws org.apache.thrift.TException {
        parse_tagged_sentence_result result = new parse_tagged_sentence_result();
        result.success = iface.parse_tagged_sentence(args.taggedSentence, args.outputFormat, args.divider);
        return result;
      }
    }

    public static class lexicalize_parse_tree<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lexicalize_parse_tree_args> {
      public lexicalize_parse_tree() {
        super("lexicalize_parse_tree");
      }

      public lexicalize_parse_tree_args getEmptyArgsInstance() {
        return new lexicalize_parse_tree_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public lexicalize_parse_tree_result getResult(I iface, lexicalize_parse_tree_args args) throws org.apache.thrift.TException {
        lexicalize_parse_tree_result result = new lexicalize_parse_tree_result();
        result.success = iface.lexicalize_parse_tree(args.tree);
        return result;
      }
    }

    public static class get_entities_from_text<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_entities_from_text_args> {
      public get_entities_from_text() {
        super("get_entities_from_text");
      }

      public get_entities_from_text_args getEmptyArgsInstance() {
        return new get_entities_from_text_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_entities_from_text_result getResult(I iface, get_entities_from_text_args args) throws org.apache.thrift.TException {
        get_entities_from_text_result result = new get_entities_from_text_result();
        result.success = iface.get_entities_from_text(args.text);
        return result;
      }
    }

    public static class get_entities_from_tokens<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_entities_from_tokens_args> {
      public get_entities_from_tokens() {
        super("get_entities_from_tokens");
      }

      public get_entities_from_tokens_args getEmptyArgsInstance() {
        return new get_entities_from_tokens_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_entities_from_tokens_result getResult(I iface, get_entities_from_tokens_args args) throws org.apache.thrift.TException {
        get_entities_from_tokens_result result = new get_entities_from_tokens_result();
        result.success = iface.get_entities_from_tokens(args.tokens);
        return result;
      }
    }

    public static class get_entities_from_trees<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_entities_from_trees_args> {
      public get_entities_from_trees() {
        super("get_entities_from_trees");
      }

      public get_entities_from_trees_args getEmptyArgsInstance() {
        return new get_entities_from_trees_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_entities_from_trees_result getResult(I iface, get_entities_from_trees_args args) throws org.apache.thrift.TException {
        get_entities_from_trees_result result = new get_entities_from_trees_result();
        result.success = iface.get_entities_from_trees(args.trees);
        return result;
      }
    }

    public static class resolve_coreferences_in_text<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resolve_coreferences_in_text_args> {
      public resolve_coreferences_in_text() {
        super("resolve_coreferences_in_text");
      }

      public resolve_coreferences_in_text_args getEmptyArgsInstance() {
        return new resolve_coreferences_in_text_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resolve_coreferences_in_text_result getResult(I iface, resolve_coreferences_in_text_args args) throws org.apache.thrift.TException {
        resolve_coreferences_in_text_result result = new resolve_coreferences_in_text_result();
        result.success = iface.resolve_coreferences_in_text(args.text);
        return result;
      }
    }

    public static class resolve_coreferences_in_tokenized_sentences<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resolve_coreferences_in_tokenized_sentences_args> {
      public resolve_coreferences_in_tokenized_sentences() {
        super("resolve_coreferences_in_tokenized_sentences");
      }

      public resolve_coreferences_in_tokenized_sentences_args getEmptyArgsInstance() {
        return new resolve_coreferences_in_tokenized_sentences_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resolve_coreferences_in_tokenized_sentences_result getResult(I iface, resolve_coreferences_in_tokenized_sentences_args args) throws org.apache.thrift.TException {
        resolve_coreferences_in_tokenized_sentences_result result = new resolve_coreferences_in_tokenized_sentences_result();
        result.success = iface.resolve_coreferences_in_tokenized_sentences(args.sentencesWithTokensSeparatedBySpace);
        return result;
      }
    }

    public static class resolve_coreferences_in_trees<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resolve_coreferences_in_trees_args> {
      public resolve_coreferences_in_trees() {
        super("resolve_coreferences_in_trees");
      }

      public resolve_coreferences_in_trees_args getEmptyArgsInstance() {
        return new resolve_coreferences_in_trees_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resolve_coreferences_in_trees_result getResult(I iface, resolve_coreferences_in_trees_args args) throws org.apache.thrift.TException {
        resolve_coreferences_in_trees_result result = new resolve_coreferences_in_trees_result();
        result.success = iface.resolve_coreferences_in_trees(args.trees);
        return result;
      }
    }

    public static class evaluate_tregex_pattern<I extends Iface> extends org.apache.thrift.ProcessFunction<I, evaluate_tregex_pattern_args> {
      public evaluate_tregex_pattern() {
        super("evaluate_tregex_pattern");
      }

      public evaluate_tregex_pattern_args getEmptyArgsInstance() {
        return new evaluate_tregex_pattern_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public evaluate_tregex_pattern_result getResult(I iface, evaluate_tregex_pattern_args args) throws org.apache.thrift.TException {
        evaluate_tregex_pattern_result result = new evaluate_tregex_pattern_result();
        result.success = iface.evaluate_tregex_pattern(args.parseTree, args.tregexPattern);
        return result;
      }
    }

    public static class tag_text<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tag_text_args> {
      public tag_text() {
        super("tag_text");
      }

      public tag_text_args getEmptyArgsInstance() {
        return new tag_text_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tag_text_result getResult(I iface, tag_text_args args) throws org.apache.thrift.TException {
        tag_text_result result = new tag_text_result();
        result.success = iface.tag_text(args.untokenizedText);
        return result;
      }
    }

    public static class tag_tokenized_sentence<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tag_tokenized_sentence_args> {
      public tag_tokenized_sentence() {
        super("tag_tokenized_sentence");
      }

      public tag_tokenized_sentence_args getEmptyArgsInstance() {
        return new tag_tokenized_sentence_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tag_tokenized_sentence_result getResult(I iface, tag_tokenized_sentence_args args) throws org.apache.thrift.TException {
        tag_tokenized_sentence_result result = new tag_tokenized_sentence_result();
        result.success = iface.tag_tokenized_sentence(args.tokenizedSentence);
        return result;
      }
    }

    public static class tag_partially_tagged_tokenized_sentence<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tag_partially_tagged_tokenized_sentence_args> {
      public tag_partially_tagged_tokenized_sentence() {
        super("tag_partially_tagged_tokenized_sentence");
      }

      public tag_partially_tagged_tokenized_sentence_args getEmptyArgsInstance() {
        return new tag_partially_tagged_tokenized_sentence_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tag_partially_tagged_tokenized_sentence_result getResult(I iface, tag_partially_tagged_tokenized_sentence_args args) throws org.apache.thrift.TException {
        tag_partially_tagged_tokenized_sentence_result result = new tag_partially_tagged_tokenized_sentence_result();
        result.success = iface.tag_partially_tagged_tokenized_sentence(args.ptaggedtokenizedSentence, args.divider);
        return result;
      }
    }

    public static class untokenize_sentence<I extends Iface> extends org.apache.thrift.ProcessFunction<I, untokenize_sentence_args> {
      public untokenize_sentence() {
        super("untokenize_sentence");
      }

      public untokenize_sentence_args getEmptyArgsInstance() {
        return new untokenize_sentence_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public untokenize_sentence_result getResult(I iface, untokenize_sentence_args args) throws org.apache.thrift.TException {
        untokenize_sentence_result result = new untokenize_sentence_result();
        result.success = iface.untokenize_sentence(args.sentenceTokens);
        return result;
      }
    }

    public static class tokenize_text<I extends Iface> extends org.apache.thrift.ProcessFunction<I, tokenize_text_args> {
      public tokenize_text() {
        super("tokenize_text");
      }

      public tokenize_text_args getEmptyArgsInstance() {
        return new tokenize_text_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public tokenize_text_result getResult(I iface, tokenize_text_args args) throws org.apache.thrift.TException {
        tokenize_text_result result = new tokenize_text_result();
        result.success = iface.tokenize_text(args.arbitraryText);
        return result;
      }
    }

    public static class sr_parse_tagged_sentence<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sr_parse_tagged_sentence_args> {
      public sr_parse_tagged_sentence() {
        super("sr_parse_tagged_sentence");
      }

      public sr_parse_tagged_sentence_args getEmptyArgsInstance() {
        return new sr_parse_tagged_sentence_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sr_parse_tagged_sentence_result getResult(I iface, sr_parse_tagged_sentence_args args) throws org.apache.thrift.TException {
        sr_parse_tagged_sentence_result result = new sr_parse_tagged_sentence_result();
        result.success = iface.sr_parse_tagged_sentence(args.taggedSentence, args.outputFormat, args.divider);
        return result;
      }
    }

    public static class sr_parse_text<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sr_parse_text_args> {
      public sr_parse_text() {
        super("sr_parse_text");
      }

      public sr_parse_text_args getEmptyArgsInstance() {
        return new sr_parse_text_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sr_parse_text_result getResult(I iface, sr_parse_text_args args) throws org.apache.thrift.TException {
        sr_parse_text_result result = new sr_parse_text_result();
        result.success = iface.sr_parse_text(args.untokenizedText, args.outputFormat);
        return result;
      }
    }

    public static class sr_parse_tokens<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sr_parse_tokens_args> {
      public sr_parse_tokens() {
        super("sr_parse_tokens");
      }

      public sr_parse_tokens_args getEmptyArgsInstance() {
        return new sr_parse_tokens_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sr_parse_tokens_result getResult(I iface, sr_parse_tokens_args args) throws org.apache.thrift.TException {
        sr_parse_tokens_result result = new sr_parse_tokens_result();
        result.success = iface.sr_parse_tokens(args.tokenizedSentence, args.outputFormat);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("zip", new zip());
      processMap.put("parse_text", new parse_text());
      processMap.put("parse_tokens", new parse_tokens());
      processMap.put("parse_tagged_sentence", new parse_tagged_sentence());
      processMap.put("lexicalize_parse_tree", new lexicalize_parse_tree());
      processMap.put("get_entities_from_text", new get_entities_from_text());
      processMap.put("get_entities_from_tokens", new get_entities_from_tokens());
      processMap.put("get_entities_from_trees", new get_entities_from_trees());
      processMap.put("resolve_coreferences_in_text", new resolve_coreferences_in_text());
      processMap.put("resolve_coreferences_in_tokenized_sentences", new resolve_coreferences_in_tokenized_sentences());
      processMap.put("resolve_coreferences_in_trees", new resolve_coreferences_in_trees());
      processMap.put("evaluate_tregex_pattern", new evaluate_tregex_pattern());
      processMap.put("tag_text", new tag_text());
      processMap.put("tag_tokenized_sentence", new tag_tokenized_sentence());
      processMap.put("tag_partially_tagged_tokenized_sentence", new tag_partially_tagged_tokenized_sentence());
      processMap.put("untokenize_sentence", new untokenize_sentence());
      processMap.put("tokenize_text", new tokenize_text());
      processMap.put("sr_parse_tagged_sentence", new sr_parse_tagged_sentence());
      processMap.put("sr_parse_text", new sr_parse_text());
      processMap.put("sr_parse_tokens", new sr_parse_tokens());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Void> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ping_result result = new ping_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.ping(resultHandler);
      }
    }

    public static class zip<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, zip_args, Void> {
      public zip() {
        super("zip");
      }

      public zip_args getEmptyArgsInstance() {
        return new zip_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, zip_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.zip(resultHandler);
      }
    }

    public static class parse_text<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, parse_text_args, List<ParseTree>> {
      public parse_text() {
        super("parse_text");
      }

      public parse_text_args getEmptyArgsInstance() {
        return new parse_text_args();
      }

      public AsyncMethodCallback<List<ParseTree>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ParseTree>>() { 
          public void onComplete(List<ParseTree> o) {
            parse_text_result result = new parse_text_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            parse_text_result result = new parse_text_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, parse_text_args args, org.apache.thrift.async.AsyncMethodCallback<List<ParseTree>> resultHandler) throws TException {
        iface.parse_text(args.text, args.outputFormat,resultHandler);
      }
    }

    public static class parse_tokens<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, parse_tokens_args, ParseTree> {
      public parse_tokens() {
        super("parse_tokens");
      }

      public parse_tokens_args getEmptyArgsInstance() {
        return new parse_tokens_args();
      }

      public AsyncMethodCallback<ParseTree> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ParseTree>() { 
          public void onComplete(ParseTree o) {
            parse_tokens_result result = new parse_tokens_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            parse_tokens_result result = new parse_tokens_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, parse_tokens_args args, org.apache.thrift.async.AsyncMethodCallback<ParseTree> resultHandler) throws TException {
        iface.parse_tokens(args.tokens, args.outputFormat,resultHandler);
      }
    }

    public static class parse_tagged_sentence<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, parse_tagged_sentence_args, ParseTree> {
      public parse_tagged_sentence() {
        super("parse_tagged_sentence");
      }

      public parse_tagged_sentence_args getEmptyArgsInstance() {
        return new parse_tagged_sentence_args();
      }

      public AsyncMethodCallback<ParseTree> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ParseTree>() { 
          public void onComplete(ParseTree o) {
            parse_tagged_sentence_result result = new parse_tagged_sentence_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            parse_tagged_sentence_result result = new parse_tagged_sentence_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, parse_tagged_sentence_args args, org.apache.thrift.async.AsyncMethodCallback<ParseTree> resultHandler) throws TException {
        iface.parse_tagged_sentence(args.taggedSentence, args.outputFormat, args.divider,resultHandler);
      }
    }

    public static class lexicalize_parse_tree<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lexicalize_parse_tree_args, String> {
      public lexicalize_parse_tree() {
        super("lexicalize_parse_tree");
      }

      public lexicalize_parse_tree_args getEmptyArgsInstance() {
        return new lexicalize_parse_tree_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            lexicalize_parse_tree_result result = new lexicalize_parse_tree_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            lexicalize_parse_tree_result result = new lexicalize_parse_tree_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lexicalize_parse_tree_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.lexicalize_parse_tree(args.tree,resultHandler);
      }
    }

    public static class get_entities_from_text<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_entities_from_text_args, List<NamedEntity>> {
      public get_entities_from_text() {
        super("get_entities_from_text");
      }

      public get_entities_from_text_args getEmptyArgsInstance() {
        return new get_entities_from_text_args();
      }

      public AsyncMethodCallback<List<NamedEntity>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<NamedEntity>>() { 
          public void onComplete(List<NamedEntity> o) {
            get_entities_from_text_result result = new get_entities_from_text_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_entities_from_text_result result = new get_entities_from_text_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_entities_from_text_args args, org.apache.thrift.async.AsyncMethodCallback<List<NamedEntity>> resultHandler) throws TException {
        iface.get_entities_from_text(args.text,resultHandler);
      }
    }

    public static class get_entities_from_tokens<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_entities_from_tokens_args, List<NamedEntity>> {
      public get_entities_from_tokens() {
        super("get_entities_from_tokens");
      }

      public get_entities_from_tokens_args getEmptyArgsInstance() {
        return new get_entities_from_tokens_args();
      }

      public AsyncMethodCallback<List<NamedEntity>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<NamedEntity>>() { 
          public void onComplete(List<NamedEntity> o) {
            get_entities_from_tokens_result result = new get_entities_from_tokens_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_entities_from_tokens_result result = new get_entities_from_tokens_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_entities_from_tokens_args args, org.apache.thrift.async.AsyncMethodCallback<List<NamedEntity>> resultHandler) throws TException {
        iface.get_entities_from_tokens(args.tokens,resultHandler);
      }
    }

    public static class get_entities_from_trees<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_entities_from_trees_args, List<NamedEntity>> {
      public get_entities_from_trees() {
        super("get_entities_from_trees");
      }

      public get_entities_from_trees_args getEmptyArgsInstance() {
        return new get_entities_from_trees_args();
      }

      public AsyncMethodCallback<List<NamedEntity>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<NamedEntity>>() { 
          public void onComplete(List<NamedEntity> o) {
            get_entities_from_trees_result result = new get_entities_from_trees_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_entities_from_trees_result result = new get_entities_from_trees_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_entities_from_trees_args args, org.apache.thrift.async.AsyncMethodCallback<List<NamedEntity>> resultHandler) throws TException {
        iface.get_entities_from_trees(args.trees,resultHandler);
      }
    }

    public static class resolve_coreferences_in_text<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resolve_coreferences_in_text_args, List<String>> {
      public resolve_coreferences_in_text() {
        super("resolve_coreferences_in_text");
      }

      public resolve_coreferences_in_text_args getEmptyArgsInstance() {
        return new resolve_coreferences_in_text_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            resolve_coreferences_in_text_result result = new resolve_coreferences_in_text_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            resolve_coreferences_in_text_result result = new resolve_coreferences_in_text_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resolve_coreferences_in_text_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.resolve_coreferences_in_text(args.text,resultHandler);
      }
    }

    public static class resolve_coreferences_in_tokenized_sentences<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resolve_coreferences_in_tokenized_sentences_args, List<String>> {
      public resolve_coreferences_in_tokenized_sentences() {
        super("resolve_coreferences_in_tokenized_sentences");
      }

      public resolve_coreferences_in_tokenized_sentences_args getEmptyArgsInstance() {
        return new resolve_coreferences_in_tokenized_sentences_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            resolve_coreferences_in_tokenized_sentences_result result = new resolve_coreferences_in_tokenized_sentences_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            resolve_coreferences_in_tokenized_sentences_result result = new resolve_coreferences_in_tokenized_sentences_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resolve_coreferences_in_tokenized_sentences_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.resolve_coreferences_in_tokenized_sentences(args.sentencesWithTokensSeparatedBySpace,resultHandler);
      }
    }

    public static class resolve_coreferences_in_trees<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resolve_coreferences_in_trees_args, List<String>> {
      public resolve_coreferences_in_trees() {
        super("resolve_coreferences_in_trees");
      }

      public resolve_coreferences_in_trees_args getEmptyArgsInstance() {
        return new resolve_coreferences_in_trees_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            resolve_coreferences_in_trees_result result = new resolve_coreferences_in_trees_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            resolve_coreferences_in_trees_result result = new resolve_coreferences_in_trees_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resolve_coreferences_in_trees_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.resolve_coreferences_in_trees(args.trees,resultHandler);
      }
    }

    public static class evaluate_tregex_pattern<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, evaluate_tregex_pattern_args, List<String>> {
      public evaluate_tregex_pattern() {
        super("evaluate_tregex_pattern");
      }

      public evaluate_tregex_pattern_args getEmptyArgsInstance() {
        return new evaluate_tregex_pattern_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            evaluate_tregex_pattern_result result = new evaluate_tregex_pattern_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            evaluate_tregex_pattern_result result = new evaluate_tregex_pattern_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, evaluate_tregex_pattern_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.evaluate_tregex_pattern(args.parseTree, args.tregexPattern,resultHandler);
      }
    }

    public static class tag_text<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, tag_text_args, List<List<TaggedToken>>> {
      public tag_text() {
        super("tag_text");
      }

      public tag_text_args getEmptyArgsInstance() {
        return new tag_text_args();
      }

      public AsyncMethodCallback<List<List<TaggedToken>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<TaggedToken>>>() { 
          public void onComplete(List<List<TaggedToken>> o) {
            tag_text_result result = new tag_text_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            tag_text_result result = new tag_text_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, tag_text_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<TaggedToken>>> resultHandler) throws TException {
        iface.tag_text(args.untokenizedText,resultHandler);
      }
    }

    public static class tag_tokenized_sentence<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, tag_tokenized_sentence_args, List<TaggedToken>> {
      public tag_tokenized_sentence() {
        super("tag_tokenized_sentence");
      }

      public tag_tokenized_sentence_args getEmptyArgsInstance() {
        return new tag_tokenized_sentence_args();
      }

      public AsyncMethodCallback<List<TaggedToken>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TaggedToken>>() { 
          public void onComplete(List<TaggedToken> o) {
            tag_tokenized_sentence_result result = new tag_tokenized_sentence_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            tag_tokenized_sentence_result result = new tag_tokenized_sentence_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, tag_tokenized_sentence_args args, org.apache.thrift.async.AsyncMethodCallback<List<TaggedToken>> resultHandler) throws TException {
        iface.tag_tokenized_sentence(args.tokenizedSentence,resultHandler);
      }
    }

    public static class tag_partially_tagged_tokenized_sentence<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, tag_partially_tagged_tokenized_sentence_args, List<TaggedToken>> {
      public tag_partially_tagged_tokenized_sentence() {
        super("tag_partially_tagged_tokenized_sentence");
      }

      public tag_partially_tagged_tokenized_sentence_args getEmptyArgsInstance() {
        return new tag_partially_tagged_tokenized_sentence_args();
      }

      public AsyncMethodCallback<List<TaggedToken>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TaggedToken>>() { 
          public void onComplete(List<TaggedToken> o) {
            tag_partially_tagged_tokenized_sentence_result result = new tag_partially_tagged_tokenized_sentence_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            tag_partially_tagged_tokenized_sentence_result result = new tag_partially_tagged_tokenized_sentence_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, tag_partially_tagged_tokenized_sentence_args args, org.apache.thrift.async.AsyncMethodCallback<List<TaggedToken>> resultHandler) throws TException {
        iface.tag_partially_tagged_tokenized_sentence(args.ptaggedtokenizedSentence, args.divider,resultHandler);
      }
    }

    public static class untokenize_sentence<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, untokenize_sentence_args, String> {
      public untokenize_sentence() {
        super("untokenize_sentence");
      }

      public untokenize_sentence_args getEmptyArgsInstance() {
        return new untokenize_sentence_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            untokenize_sentence_result result = new untokenize_sentence_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            untokenize_sentence_result result = new untokenize_sentence_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, untokenize_sentence_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.untokenize_sentence(args.sentenceTokens,resultHandler);
      }
    }

    public static class tokenize_text<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, tokenize_text_args, List<List<String>>> {
      public tokenize_text() {
        super("tokenize_text");
      }

      public tokenize_text_args getEmptyArgsInstance() {
        return new tokenize_text_args();
      }

      public AsyncMethodCallback<List<List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<String>>>() { 
          public void onComplete(List<List<String>> o) {
            tokenize_text_result result = new tokenize_text_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            tokenize_text_result result = new tokenize_text_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, tokenize_text_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<String>>> resultHandler) throws TException {
        iface.tokenize_text(args.arbitraryText,resultHandler);
      }
    }

    public static class sr_parse_tagged_sentence<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sr_parse_tagged_sentence_args, ParseTree> {
      public sr_parse_tagged_sentence() {
        super("sr_parse_tagged_sentence");
      }

      public sr_parse_tagged_sentence_args getEmptyArgsInstance() {
        return new sr_parse_tagged_sentence_args();
      }

      public AsyncMethodCallback<ParseTree> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ParseTree>() { 
          public void onComplete(ParseTree o) {
            sr_parse_tagged_sentence_result result = new sr_parse_tagged_sentence_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sr_parse_tagged_sentence_result result = new sr_parse_tagged_sentence_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sr_parse_tagged_sentence_args args, org.apache.thrift.async.AsyncMethodCallback<ParseTree> resultHandler) throws TException {
        iface.sr_parse_tagged_sentence(args.taggedSentence, args.outputFormat, args.divider,resultHandler);
      }
    }

    public static class sr_parse_text<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sr_parse_text_args, List<ParseTree>> {
      public sr_parse_text() {
        super("sr_parse_text");
      }

      public sr_parse_text_args getEmptyArgsInstance() {
        return new sr_parse_text_args();
      }

      public AsyncMethodCallback<List<ParseTree>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ParseTree>>() { 
          public void onComplete(List<ParseTree> o) {
            sr_parse_text_result result = new sr_parse_text_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sr_parse_text_result result = new sr_parse_text_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sr_parse_text_args args, org.apache.thrift.async.AsyncMethodCallback<List<ParseTree>> resultHandler) throws TException {
        iface.sr_parse_text(args.untokenizedText, args.outputFormat,resultHandler);
      }
    }

    public static class sr_parse_tokens<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sr_parse_tokens_args, ParseTree> {
      public sr_parse_tokens() {
        super("sr_parse_tokens");
      }

      public sr_parse_tokens_args getEmptyArgsInstance() {
        return new sr_parse_tokens_args();
      }

      public AsyncMethodCallback<ParseTree> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ParseTree>() { 
          public void onComplete(ParseTree o) {
            sr_parse_tokens_result result = new sr_parse_tokens_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sr_parse_tokens_result result = new sr_parse_tokens_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sr_parse_tokens_args args, org.apache.thrift.async.AsyncMethodCallback<ParseTree> resultHandler) throws TException {
        iface.sr_parse_tokens(args.tokenizedSentence, args.outputFormat,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class zip_args implements org.apache.thrift.TBase<zip_args, zip_args._Fields>, java.io.Serializable, Cloneable, Comparable<zip_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("zip_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new zip_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new zip_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(zip_args.class, metaDataMap);
    }

    public zip_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public zip_args(zip_args other) {
    }

    public zip_args deepCopy() {
      return new zip_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof zip_args)
        return this.equals((zip_args)that);
      return false;
    }

    public boolean equals(zip_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(zip_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("zip_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class zip_argsStandardSchemeFactory implements SchemeFactory {
      public zip_argsStandardScheme getScheme() {
        return new zip_argsStandardScheme();
      }
    }

    private static class zip_argsStandardScheme extends StandardScheme<zip_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, zip_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, zip_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class zip_argsTupleSchemeFactory implements SchemeFactory {
      public zip_argsTupleScheme getScheme() {
        return new zip_argsTupleScheme();
      }
    }

    private static class zip_argsTupleScheme extends TupleScheme<zip_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, zip_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, zip_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class parse_text_args implements org.apache.thrift.TBase<parse_text_args, parse_text_args._Fields>, java.io.Serializable, Cloneable, Comparable<parse_text_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parse_text_args");

    private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OUTPUT_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("outputFormat", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new parse_text_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new parse_text_argsTupleSchemeFactory());
    }

    public String text; // required
    public List<String> outputFormat; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEXT((short)1, "text"),
      OUTPUT_FORMAT((short)2, "outputFormat");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEXT
            return TEXT;
          case 2: // OUTPUT_FORMAT
            return OUTPUT_FORMAT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("outputFormat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parse_text_args.class, metaDataMap);
    }

    public parse_text_args() {
    }

    public parse_text_args(
      String text,
      List<String> outputFormat)
    {
      this();
      this.text = text;
      this.outputFormat = outputFormat;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parse_text_args(parse_text_args other) {
      if (other.isSetText()) {
        this.text = other.text;
      }
      if (other.isSetOutputFormat()) {
        List<String> __this__outputFormat = new ArrayList<String>(other.outputFormat);
        this.outputFormat = __this__outputFormat;
      }
    }

    public parse_text_args deepCopy() {
      return new parse_text_args(this);
    }

    @Override
    public void clear() {
      this.text = null;
      this.outputFormat = null;
    }

    public String getText() {
      return this.text;
    }

    public parse_text_args setText(String text) {
      this.text = text;
      return this;
    }

    public void unsetText() {
      this.text = null;
    }

    /** Returns true if field text is set (has been assigned a value) and false otherwise */
    public boolean isSetText() {
      return this.text != null;
    }

    public void setTextIsSet(boolean value) {
      if (!value) {
        this.text = null;
      }
    }

    public int getOutputFormatSize() {
      return (this.outputFormat == null) ? 0 : this.outputFormat.size();
    }

    public java.util.Iterator<String> getOutputFormatIterator() {
      return (this.outputFormat == null) ? null : this.outputFormat.iterator();
    }

    public void addToOutputFormat(String elem) {
      if (this.outputFormat == null) {
        this.outputFormat = new ArrayList<String>();
      }
      this.outputFormat.add(elem);
    }

    public List<String> getOutputFormat() {
      return this.outputFormat;
    }

    public parse_text_args setOutputFormat(List<String> outputFormat) {
      this.outputFormat = outputFormat;
      return this;
    }

    public void unsetOutputFormat() {
      this.outputFormat = null;
    }

    /** Returns true if field outputFormat is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputFormat() {
      return this.outputFormat != null;
    }

    public void setOutputFormatIsSet(boolean value) {
      if (!value) {
        this.outputFormat = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEXT:
        if (value == null) {
          unsetText();
        } else {
          setText((String)value);
        }
        break;

      case OUTPUT_FORMAT:
        if (value == null) {
          unsetOutputFormat();
        } else {
          setOutputFormat((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEXT:
        return getText();

      case OUTPUT_FORMAT:
        return getOutputFormat();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEXT:
        return isSetText();
      case OUTPUT_FORMAT:
        return isSetOutputFormat();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof parse_text_args)
        return this.equals((parse_text_args)that);
      return false;
    }

    public boolean equals(parse_text_args that) {
      if (that == null)
        return false;

      boolean this_present_text = true && this.isSetText();
      boolean that_present_text = true && that.isSetText();
      if (this_present_text || that_present_text) {
        if (!(this_present_text && that_present_text))
          return false;
        if (!this.text.equals(that.text))
          return false;
      }

      boolean this_present_outputFormat = true && this.isSetOutputFormat();
      boolean that_present_outputFormat = true && that.isSetOutputFormat();
      if (this_present_outputFormat || that_present_outputFormat) {
        if (!(this_present_outputFormat && that_present_outputFormat))
          return false;
        if (!this.outputFormat.equals(that.outputFormat))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_text = true && (isSetText());
      list.add(present_text);
      if (present_text)
        list.add(text);

      boolean present_outputFormat = true && (isSetOutputFormat());
      list.add(present_outputFormat);
      if (present_outputFormat)
        list.add(outputFormat);

      return list.hashCode();
    }

    @Override
    public int compareTo(parse_text_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetText()).compareTo(other.isSetText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutputFormat()).compareTo(other.isSetOutputFormat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputFormat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputFormat, other.outputFormat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("parse_text_args(");
      boolean first = true;

      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputFormat:");
      if (this.outputFormat == null) {
        sb.append("null");
      } else {
        sb.append(this.outputFormat);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parse_text_argsStandardSchemeFactory implements SchemeFactory {
      public parse_text_argsStandardScheme getScheme() {
        return new parse_text_argsStandardScheme();
      }
    }

    private static class parse_text_argsStandardScheme extends StandardScheme<parse_text_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parse_text_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.text = iprot.readString();
                struct.setTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTPUT_FORMAT
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.outputFormat = new ArrayList<String>(_list0.size);
                  String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.outputFormat.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setOutputFormatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parse_text_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.text != null) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          oprot.writeString(struct.text);
          oprot.writeFieldEnd();
        }
        if (struct.outputFormat != null) {
          oprot.writeFieldBegin(OUTPUT_FORMAT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.outputFormat.size()));
            for (String _iter3 : struct.outputFormat)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parse_text_argsTupleSchemeFactory implements SchemeFactory {
      public parse_text_argsTupleScheme getScheme() {
        return new parse_text_argsTupleScheme();
      }
    }

    private static class parse_text_argsTupleScheme extends TupleScheme<parse_text_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, parse_text_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetText()) {
          optionals.set(0);
        }
        if (struct.isSetOutputFormat()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetText()) {
          oprot.writeString(struct.text);
        }
        if (struct.isSetOutputFormat()) {
          {
            oprot.writeI32(struct.outputFormat.size());
            for (String _iter4 : struct.outputFormat)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, parse_text_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.text = iprot.readString();
          struct.setTextIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.outputFormat = new ArrayList<String>(_list5.size);
            String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.outputFormat.add(_elem6);
            }
          }
          struct.setOutputFormatIsSet(true);
        }
      }
    }

  }

  public static class parse_text_result implements org.apache.thrift.TBase<parse_text_result, parse_text_result._Fields>, java.io.Serializable, Cloneable, Comparable<parse_text_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parse_text_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new parse_text_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new parse_text_resultTupleSchemeFactory());
    }

    public List<ParseTree> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ParseTree.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parse_text_result.class, metaDataMap);
    }

    public parse_text_result() {
    }

    public parse_text_result(
      List<ParseTree> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parse_text_result(parse_text_result other) {
      if (other.isSetSuccess()) {
        List<ParseTree> __this__success = new ArrayList<ParseTree>(other.success.size());
        for (ParseTree other_element : other.success) {
          __this__success.add(new ParseTree(other_element));
        }
        this.success = __this__success;
      }
    }

    public parse_text_result deepCopy() {
      return new parse_text_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ParseTree> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ParseTree elem) {
      if (this.success == null) {
        this.success = new ArrayList<ParseTree>();
      }
      this.success.add(elem);
    }

    public List<ParseTree> getSuccess() {
      return this.success;
    }

    public parse_text_result setSuccess(List<ParseTree> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ParseTree>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof parse_text_result)
        return this.equals((parse_text_result)that);
      return false;
    }

    public boolean equals(parse_text_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(parse_text_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("parse_text_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parse_text_resultStandardSchemeFactory implements SchemeFactory {
      public parse_text_resultStandardScheme getScheme() {
        return new parse_text_resultStandardScheme();
      }
    }

    private static class parse_text_resultStandardScheme extends StandardScheme<parse_text_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parse_text_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<ParseTree>(_list8.size);
                  ParseTree _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new ParseTree();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parse_text_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ParseTree _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parse_text_resultTupleSchemeFactory implements SchemeFactory {
      public parse_text_resultTupleScheme getScheme() {
        return new parse_text_resultTupleScheme();
      }
    }

    private static class parse_text_resultTupleScheme extends TupleScheme<parse_text_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, parse_text_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ParseTree _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, parse_text_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ParseTree>(_list13.size);
            ParseTree _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new ParseTree();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class parse_tokens_args implements org.apache.thrift.TBase<parse_tokens_args, parse_tokens_args._Fields>, java.io.Serializable, Cloneable, Comparable<parse_tokens_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parse_tokens_args");

    private static final org.apache.thrift.protocol.TField TOKENS_FIELD_DESC = new org.apache.thrift.protocol.TField("tokens", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField OUTPUT_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("outputFormat", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new parse_tokens_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new parse_tokens_argsTupleSchemeFactory());
    }

    public List<String> tokens; // required
    public List<String> outputFormat; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKENS((short)1, "tokens"),
      OUTPUT_FORMAT((short)2, "outputFormat");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKENS
            return TOKENS;
          case 2: // OUTPUT_FORMAT
            return OUTPUT_FORMAT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKENS, new org.apache.thrift.meta_data.FieldMetaData("tokens", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OUTPUT_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("outputFormat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parse_tokens_args.class, metaDataMap);
    }

    public parse_tokens_args() {
    }

    public parse_tokens_args(
      List<String> tokens,
      List<String> outputFormat)
    {
      this();
      this.tokens = tokens;
      this.outputFormat = outputFormat;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parse_tokens_args(parse_tokens_args other) {
      if (other.isSetTokens()) {
        List<String> __this__tokens = new ArrayList<String>(other.tokens);
        this.tokens = __this__tokens;
      }
      if (other.isSetOutputFormat()) {
        List<String> __this__outputFormat = new ArrayList<String>(other.outputFormat);
        this.outputFormat = __this__outputFormat;
      }
    }

    public parse_tokens_args deepCopy() {
      return new parse_tokens_args(this);
    }

    @Override
    public void clear() {
      this.tokens = null;
      this.outputFormat = null;
    }

    public int getTokensSize() {
      return (this.tokens == null) ? 0 : this.tokens.size();
    }

    public java.util.Iterator<String> getTokensIterator() {
      return (this.tokens == null) ? null : this.tokens.iterator();
    }

    public void addToTokens(String elem) {
      if (this.tokens == null) {
        this.tokens = new ArrayList<String>();
      }
      this.tokens.add(elem);
    }

    public List<String> getTokens() {
      return this.tokens;
    }

    public parse_tokens_args setTokens(List<String> tokens) {
      this.tokens = tokens;
      return this;
    }

    public void unsetTokens() {
      this.tokens = null;
    }

    /** Returns true if field tokens is set (has been assigned a value) and false otherwise */
    public boolean isSetTokens() {
      return this.tokens != null;
    }

    public void setTokensIsSet(boolean value) {
      if (!value) {
        this.tokens = null;
      }
    }

    public int getOutputFormatSize() {
      return (this.outputFormat == null) ? 0 : this.outputFormat.size();
    }

    public java.util.Iterator<String> getOutputFormatIterator() {
      return (this.outputFormat == null) ? null : this.outputFormat.iterator();
    }

    public void addToOutputFormat(String elem) {
      if (this.outputFormat == null) {
        this.outputFormat = new ArrayList<String>();
      }
      this.outputFormat.add(elem);
    }

    public List<String> getOutputFormat() {
      return this.outputFormat;
    }

    public parse_tokens_args setOutputFormat(List<String> outputFormat) {
      this.outputFormat = outputFormat;
      return this;
    }

    public void unsetOutputFormat() {
      this.outputFormat = null;
    }

    /** Returns true if field outputFormat is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputFormat() {
      return this.outputFormat != null;
    }

    public void setOutputFormatIsSet(boolean value) {
      if (!value) {
        this.outputFormat = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKENS:
        if (value == null) {
          unsetTokens();
        } else {
          setTokens((List<String>)value);
        }
        break;

      case OUTPUT_FORMAT:
        if (value == null) {
          unsetOutputFormat();
        } else {
          setOutputFormat((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKENS:
        return getTokens();

      case OUTPUT_FORMAT:
        return getOutputFormat();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKENS:
        return isSetTokens();
      case OUTPUT_FORMAT:
        return isSetOutputFormat();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof parse_tokens_args)
        return this.equals((parse_tokens_args)that);
      return false;
    }

    public boolean equals(parse_tokens_args that) {
      if (that == null)
        return false;

      boolean this_present_tokens = true && this.isSetTokens();
      boolean that_present_tokens = true && that.isSetTokens();
      if (this_present_tokens || that_present_tokens) {
        if (!(this_present_tokens && that_present_tokens))
          return false;
        if (!this.tokens.equals(that.tokens))
          return false;
      }

      boolean this_present_outputFormat = true && this.isSetOutputFormat();
      boolean that_present_outputFormat = true && that.isSetOutputFormat();
      if (this_present_outputFormat || that_present_outputFormat) {
        if (!(this_present_outputFormat && that_present_outputFormat))
          return false;
        if (!this.outputFormat.equals(that.outputFormat))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tokens = true && (isSetTokens());
      list.add(present_tokens);
      if (present_tokens)
        list.add(tokens);

      boolean present_outputFormat = true && (isSetOutputFormat());
      list.add(present_outputFormat);
      if (present_outputFormat)
        list.add(outputFormat);

      return list.hashCode();
    }

    @Override
    public int compareTo(parse_tokens_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTokens()).compareTo(other.isSetTokens());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokens()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokens, other.tokens);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutputFormat()).compareTo(other.isSetOutputFormat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputFormat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputFormat, other.outputFormat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("parse_tokens_args(");
      boolean first = true;

      sb.append("tokens:");
      if (this.tokens == null) {
        sb.append("null");
      } else {
        sb.append(this.tokens);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputFormat:");
      if (this.outputFormat == null) {
        sb.append("null");
      } else {
        sb.append(this.outputFormat);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parse_tokens_argsStandardSchemeFactory implements SchemeFactory {
      public parse_tokens_argsStandardScheme getScheme() {
        return new parse_tokens_argsStandardScheme();
      }
    }

    private static class parse_tokens_argsStandardScheme extends StandardScheme<parse_tokens_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parse_tokens_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKENS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.tokens = new ArrayList<String>(_list16.size);
                  String _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readString();
                    struct.tokens.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setTokensIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTPUT_FORMAT
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                  struct.outputFormat = new ArrayList<String>(_list19.size);
                  String _elem20;
                  for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                  {
                    _elem20 = iprot.readString();
                    struct.outputFormat.add(_elem20);
                  }
                  iprot.readListEnd();
                }
                struct.setOutputFormatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parse_tokens_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tokens != null) {
          oprot.writeFieldBegin(TOKENS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tokens.size()));
            for (String _iter22 : struct.tokens)
            {
              oprot.writeString(_iter22);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.outputFormat != null) {
          oprot.writeFieldBegin(OUTPUT_FORMAT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.outputFormat.size()));
            for (String _iter23 : struct.outputFormat)
            {
              oprot.writeString(_iter23);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parse_tokens_argsTupleSchemeFactory implements SchemeFactory {
      public parse_tokens_argsTupleScheme getScheme() {
        return new parse_tokens_argsTupleScheme();
      }
    }

    private static class parse_tokens_argsTupleScheme extends TupleScheme<parse_tokens_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, parse_tokens_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTokens()) {
          optionals.set(0);
        }
        if (struct.isSetOutputFormat()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTokens()) {
          {
            oprot.writeI32(struct.tokens.size());
            for (String _iter24 : struct.tokens)
            {
              oprot.writeString(_iter24);
            }
          }
        }
        if (struct.isSetOutputFormat()) {
          {
            oprot.writeI32(struct.outputFormat.size());
            for (String _iter25 : struct.outputFormat)
            {
              oprot.writeString(_iter25);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, parse_tokens_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tokens = new ArrayList<String>(_list26.size);
            String _elem27;
            for (int _i28 = 0; _i28 < _list26.size; ++_i28)
            {
              _elem27 = iprot.readString();
              struct.tokens.add(_elem27);
            }
          }
          struct.setTokensIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.outputFormat = new ArrayList<String>(_list29.size);
            String _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = iprot.readString();
              struct.outputFormat.add(_elem30);
            }
          }
          struct.setOutputFormatIsSet(true);
        }
      }
    }

  }

  public static class parse_tokens_result implements org.apache.thrift.TBase<parse_tokens_result, parse_tokens_result._Fields>, java.io.Serializable, Cloneable, Comparable<parse_tokens_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parse_tokens_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new parse_tokens_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new parse_tokens_resultTupleSchemeFactory());
    }

    public ParseTree success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ParseTree.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parse_tokens_result.class, metaDataMap);
    }

    public parse_tokens_result() {
    }

    public parse_tokens_result(
      ParseTree success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parse_tokens_result(parse_tokens_result other) {
      if (other.isSetSuccess()) {
        this.success = new ParseTree(other.success);
      }
    }

    public parse_tokens_result deepCopy() {
      return new parse_tokens_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ParseTree getSuccess() {
      return this.success;
    }

    public parse_tokens_result setSuccess(ParseTree success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ParseTree)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof parse_tokens_result)
        return this.equals((parse_tokens_result)that);
      return false;
    }

    public boolean equals(parse_tokens_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(parse_tokens_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("parse_tokens_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parse_tokens_resultStandardSchemeFactory implements SchemeFactory {
      public parse_tokens_resultStandardScheme getScheme() {
        return new parse_tokens_resultStandardScheme();
      }
    }

    private static class parse_tokens_resultStandardScheme extends StandardScheme<parse_tokens_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parse_tokens_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ParseTree();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parse_tokens_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parse_tokens_resultTupleSchemeFactory implements SchemeFactory {
      public parse_tokens_resultTupleScheme getScheme() {
        return new parse_tokens_resultTupleScheme();
      }
    }

    private static class parse_tokens_resultTupleScheme extends TupleScheme<parse_tokens_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, parse_tokens_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, parse_tokens_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ParseTree();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class parse_tagged_sentence_args implements org.apache.thrift.TBase<parse_tagged_sentence_args, parse_tagged_sentence_args._Fields>, java.io.Serializable, Cloneable, Comparable<parse_tagged_sentence_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parse_tagged_sentence_args");

    private static final org.apache.thrift.protocol.TField TAGGED_SENTENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("taggedSentence", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OUTPUT_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("outputFormat", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField DIVIDER_FIELD_DESC = new org.apache.thrift.protocol.TField("divider", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new parse_tagged_sentence_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new parse_tagged_sentence_argsTupleSchemeFactory());
    }

    public String taggedSentence; // required
    public List<String> outputFormat; // required
    public String divider; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAGGED_SENTENCE((short)1, "taggedSentence"),
      OUTPUT_FORMAT((short)2, "outputFormat"),
      DIVIDER((short)3, "divider");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAGGED_SENTENCE
            return TAGGED_SENTENCE;
          case 2: // OUTPUT_FORMAT
            return OUTPUT_FORMAT;
          case 3: // DIVIDER
            return DIVIDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAGGED_SENTENCE, new org.apache.thrift.meta_data.FieldMetaData("taggedSentence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("outputFormat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.DIVIDER, new org.apache.thrift.meta_data.FieldMetaData("divider", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parse_tagged_sentence_args.class, metaDataMap);
    }

    public parse_tagged_sentence_args() {
    }

    public parse_tagged_sentence_args(
      String taggedSentence,
      List<String> outputFormat,
      String divider)
    {
      this();
      this.taggedSentence = taggedSentence;
      this.outputFormat = outputFormat;
      this.divider = divider;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parse_tagged_sentence_args(parse_tagged_sentence_args other) {
      if (other.isSetTaggedSentence()) {
        this.taggedSentence = other.taggedSentence;
      }
      if (other.isSetOutputFormat()) {
        List<String> __this__outputFormat = new ArrayList<String>(other.outputFormat);
        this.outputFormat = __this__outputFormat;
      }
      if (other.isSetDivider()) {
        this.divider = other.divider;
      }
    }

    public parse_tagged_sentence_args deepCopy() {
      return new parse_tagged_sentence_args(this);
    }

    @Override
    public void clear() {
      this.taggedSentence = null;
      this.outputFormat = null;
      this.divider = null;
    }

    public String getTaggedSentence() {
      return this.taggedSentence;
    }

    public parse_tagged_sentence_args setTaggedSentence(String taggedSentence) {
      this.taggedSentence = taggedSentence;
      return this;
    }

    public void unsetTaggedSentence() {
      this.taggedSentence = null;
    }

    /** Returns true if field taggedSentence is set (has been assigned a value) and false otherwise */
    public boolean isSetTaggedSentence() {
      return this.taggedSentence != null;
    }

    public void setTaggedSentenceIsSet(boolean value) {
      if (!value) {
        this.taggedSentence = null;
      }
    }

    public int getOutputFormatSize() {
      return (this.outputFormat == null) ? 0 : this.outputFormat.size();
    }

    public java.util.Iterator<String> getOutputFormatIterator() {
      return (this.outputFormat == null) ? null : this.outputFormat.iterator();
    }

    public void addToOutputFormat(String elem) {
      if (this.outputFormat == null) {
        this.outputFormat = new ArrayList<String>();
      }
      this.outputFormat.add(elem);
    }

    public List<String> getOutputFormat() {
      return this.outputFormat;
    }

    public parse_tagged_sentence_args setOutputFormat(List<String> outputFormat) {
      this.outputFormat = outputFormat;
      return this;
    }

    public void unsetOutputFormat() {
      this.outputFormat = null;
    }

    /** Returns true if field outputFormat is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputFormat() {
      return this.outputFormat != null;
    }

    public void setOutputFormatIsSet(boolean value) {
      if (!value) {
        this.outputFormat = null;
      }
    }

    public String getDivider() {
      return this.divider;
    }

    public parse_tagged_sentence_args setDivider(String divider) {
      this.divider = divider;
      return this;
    }

    public void unsetDivider() {
      this.divider = null;
    }

    /** Returns true if field divider is set (has been assigned a value) and false otherwise */
    public boolean isSetDivider() {
      return this.divider != null;
    }

    public void setDividerIsSet(boolean value) {
      if (!value) {
        this.divider = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAGGED_SENTENCE:
        if (value == null) {
          unsetTaggedSentence();
        } else {
          setTaggedSentence((String)value);
        }
        break;

      case OUTPUT_FORMAT:
        if (value == null) {
          unsetOutputFormat();
        } else {
          setOutputFormat((List<String>)value);
        }
        break;

      case DIVIDER:
        if (value == null) {
          unsetDivider();
        } else {
          setDivider((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAGGED_SENTENCE:
        return getTaggedSentence();

      case OUTPUT_FORMAT:
        return getOutputFormat();

      case DIVIDER:
        return getDivider();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAGGED_SENTENCE:
        return isSetTaggedSentence();
      case OUTPUT_FORMAT:
        return isSetOutputFormat();
      case DIVIDER:
        return isSetDivider();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof parse_tagged_sentence_args)
        return this.equals((parse_tagged_sentence_args)that);
      return false;
    }

    public boolean equals(parse_tagged_sentence_args that) {
      if (that == null)
        return false;

      boolean this_present_taggedSentence = true && this.isSetTaggedSentence();
      boolean that_present_taggedSentence = true && that.isSetTaggedSentence();
      if (this_present_taggedSentence || that_present_taggedSentence) {
        if (!(this_present_taggedSentence && that_present_taggedSentence))
          return false;
        if (!this.taggedSentence.equals(that.taggedSentence))
          return false;
      }

      boolean this_present_outputFormat = true && this.isSetOutputFormat();
      boolean that_present_outputFormat = true && that.isSetOutputFormat();
      if (this_present_outputFormat || that_present_outputFormat) {
        if (!(this_present_outputFormat && that_present_outputFormat))
          return false;
        if (!this.outputFormat.equals(that.outputFormat))
          return false;
      }

      boolean this_present_divider = true && this.isSetDivider();
      boolean that_present_divider = true && that.isSetDivider();
      if (this_present_divider || that_present_divider) {
        if (!(this_present_divider && that_present_divider))
          return false;
        if (!this.divider.equals(that.divider))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_taggedSentence = true && (isSetTaggedSentence());
      list.add(present_taggedSentence);
      if (present_taggedSentence)
        list.add(taggedSentence);

      boolean present_outputFormat = true && (isSetOutputFormat());
      list.add(present_outputFormat);
      if (present_outputFormat)
        list.add(outputFormat);

      boolean present_divider = true && (isSetDivider());
      list.add(present_divider);
      if (present_divider)
        list.add(divider);

      return list.hashCode();
    }

    @Override
    public int compareTo(parse_tagged_sentence_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaggedSentence()).compareTo(other.isSetTaggedSentence());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaggedSentence()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taggedSentence, other.taggedSentence);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutputFormat()).compareTo(other.isSetOutputFormat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputFormat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputFormat, other.outputFormat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDivider()).compareTo(other.isSetDivider());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDivider()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divider, other.divider);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("parse_tagged_sentence_args(");
      boolean first = true;

      sb.append("taggedSentence:");
      if (this.taggedSentence == null) {
        sb.append("null");
      } else {
        sb.append(this.taggedSentence);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputFormat:");
      if (this.outputFormat == null) {
        sb.append("null");
      } else {
        sb.append(this.outputFormat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("divider:");
      if (this.divider == null) {
        sb.append("null");
      } else {
        sb.append(this.divider);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parse_tagged_sentence_argsStandardSchemeFactory implements SchemeFactory {
      public parse_tagged_sentence_argsStandardScheme getScheme() {
        return new parse_tagged_sentence_argsStandardScheme();
      }
    }

    private static class parse_tagged_sentence_argsStandardScheme extends StandardScheme<parse_tagged_sentence_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parse_tagged_sentence_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TAGGED_SENTENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.taggedSentence = iprot.readString();
                struct.setTaggedSentenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTPUT_FORMAT
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.outputFormat = new ArrayList<String>(_list32.size);
                  String _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readString();
                    struct.outputFormat.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setOutputFormatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DIVIDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.divider = iprot.readString();
                struct.setDividerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parse_tagged_sentence_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.taggedSentence != null) {
          oprot.writeFieldBegin(TAGGED_SENTENCE_FIELD_DESC);
          oprot.writeString(struct.taggedSentence);
          oprot.writeFieldEnd();
        }
        if (struct.outputFormat != null) {
          oprot.writeFieldBegin(OUTPUT_FORMAT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.outputFormat.size()));
            for (String _iter35 : struct.outputFormat)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.divider != null) {
          oprot.writeFieldBegin(DIVIDER_FIELD_DESC);
          oprot.writeString(struct.divider);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parse_tagged_sentence_argsTupleSchemeFactory implements SchemeFactory {
      public parse_tagged_sentence_argsTupleScheme getScheme() {
        return new parse_tagged_sentence_argsTupleScheme();
      }
    }

    private static class parse_tagged_sentence_argsTupleScheme extends TupleScheme<parse_tagged_sentence_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, parse_tagged_sentence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaggedSentence()) {
          optionals.set(0);
        }
        if (struct.isSetOutputFormat()) {
          optionals.set(1);
        }
        if (struct.isSetDivider()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTaggedSentence()) {
          oprot.writeString(struct.taggedSentence);
        }
        if (struct.isSetOutputFormat()) {
          {
            oprot.writeI32(struct.outputFormat.size());
            for (String _iter36 : struct.outputFormat)
            {
              oprot.writeString(_iter36);
            }
          }
        }
        if (struct.isSetDivider()) {
          oprot.writeString(struct.divider);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, parse_tagged_sentence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.taggedSentence = iprot.readString();
          struct.setTaggedSentenceIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.outputFormat = new ArrayList<String>(_list37.size);
            String _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readString();
              struct.outputFormat.add(_elem38);
            }
          }
          struct.setOutputFormatIsSet(true);
        }
        if (incoming.get(2)) {
          struct.divider = iprot.readString();
          struct.setDividerIsSet(true);
        }
      }
    }

  }

  public static class parse_tagged_sentence_result implements org.apache.thrift.TBase<parse_tagged_sentence_result, parse_tagged_sentence_result._Fields>, java.io.Serializable, Cloneable, Comparable<parse_tagged_sentence_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parse_tagged_sentence_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new parse_tagged_sentence_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new parse_tagged_sentence_resultTupleSchemeFactory());
    }

    public ParseTree success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ParseTree.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parse_tagged_sentence_result.class, metaDataMap);
    }

    public parse_tagged_sentence_result() {
    }

    public parse_tagged_sentence_result(
      ParseTree success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parse_tagged_sentence_result(parse_tagged_sentence_result other) {
      if (other.isSetSuccess()) {
        this.success = new ParseTree(other.success);
      }
    }

    public parse_tagged_sentence_result deepCopy() {
      return new parse_tagged_sentence_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ParseTree getSuccess() {
      return this.success;
    }

    public parse_tagged_sentence_result setSuccess(ParseTree success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ParseTree)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof parse_tagged_sentence_result)
        return this.equals((parse_tagged_sentence_result)that);
      return false;
    }

    public boolean equals(parse_tagged_sentence_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(parse_tagged_sentence_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("parse_tagged_sentence_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parse_tagged_sentence_resultStandardSchemeFactory implements SchemeFactory {
      public parse_tagged_sentence_resultStandardScheme getScheme() {
        return new parse_tagged_sentence_resultStandardScheme();
      }
    }

    private static class parse_tagged_sentence_resultStandardScheme extends StandardScheme<parse_tagged_sentence_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parse_tagged_sentence_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ParseTree();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parse_tagged_sentence_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parse_tagged_sentence_resultTupleSchemeFactory implements SchemeFactory {
      public parse_tagged_sentence_resultTupleScheme getScheme() {
        return new parse_tagged_sentence_resultTupleScheme();
      }
    }

    private static class parse_tagged_sentence_resultTupleScheme extends TupleScheme<parse_tagged_sentence_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, parse_tagged_sentence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, parse_tagged_sentence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ParseTree();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class lexicalize_parse_tree_args implements org.apache.thrift.TBase<lexicalize_parse_tree_args, lexicalize_parse_tree_args._Fields>, java.io.Serializable, Cloneable, Comparable<lexicalize_parse_tree_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lexicalize_parse_tree_args");

    private static final org.apache.thrift.protocol.TField TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("tree", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lexicalize_parse_tree_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lexicalize_parse_tree_argsTupleSchemeFactory());
    }

    public String tree; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREE((short)1, "tree");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREE
            return TREE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREE, new org.apache.thrift.meta_data.FieldMetaData("tree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lexicalize_parse_tree_args.class, metaDataMap);
    }

    public lexicalize_parse_tree_args() {
    }

    public lexicalize_parse_tree_args(
      String tree)
    {
      this();
      this.tree = tree;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lexicalize_parse_tree_args(lexicalize_parse_tree_args other) {
      if (other.isSetTree()) {
        this.tree = other.tree;
      }
    }

    public lexicalize_parse_tree_args deepCopy() {
      return new lexicalize_parse_tree_args(this);
    }

    @Override
    public void clear() {
      this.tree = null;
    }

    public String getTree() {
      return this.tree;
    }

    public lexicalize_parse_tree_args setTree(String tree) {
      this.tree = tree;
      return this;
    }

    public void unsetTree() {
      this.tree = null;
    }

    /** Returns true if field tree is set (has been assigned a value) and false otherwise */
    public boolean isSetTree() {
      return this.tree != null;
    }

    public void setTreeIsSet(boolean value) {
      if (!value) {
        this.tree = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREE:
        if (value == null) {
          unsetTree();
        } else {
          setTree((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREE:
        return getTree();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREE:
        return isSetTree();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lexicalize_parse_tree_args)
        return this.equals((lexicalize_parse_tree_args)that);
      return false;
    }

    public boolean equals(lexicalize_parse_tree_args that) {
      if (that == null)
        return false;

      boolean this_present_tree = true && this.isSetTree();
      boolean that_present_tree = true && that.isSetTree();
      if (this_present_tree || that_present_tree) {
        if (!(this_present_tree && that_present_tree))
          return false;
        if (!this.tree.equals(that.tree))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tree = true && (isSetTree());
      list.add(present_tree);
      if (present_tree)
        list.add(tree);

      return list.hashCode();
    }

    @Override
    public int compareTo(lexicalize_parse_tree_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTree()).compareTo(other.isSetTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tree, other.tree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lexicalize_parse_tree_args(");
      boolean first = true;

      sb.append("tree:");
      if (this.tree == null) {
        sb.append("null");
      } else {
        sb.append(this.tree);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lexicalize_parse_tree_argsStandardSchemeFactory implements SchemeFactory {
      public lexicalize_parse_tree_argsStandardScheme getScheme() {
        return new lexicalize_parse_tree_argsStandardScheme();
      }
    }

    private static class lexicalize_parse_tree_argsStandardScheme extends StandardScheme<lexicalize_parse_tree_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lexicalize_parse_tree_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tree = iprot.readString();
                struct.setTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lexicalize_parse_tree_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tree != null) {
          oprot.writeFieldBegin(TREE_FIELD_DESC);
          oprot.writeString(struct.tree);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lexicalize_parse_tree_argsTupleSchemeFactory implements SchemeFactory {
      public lexicalize_parse_tree_argsTupleScheme getScheme() {
        return new lexicalize_parse_tree_argsTupleScheme();
      }
    }

    private static class lexicalize_parse_tree_argsTupleScheme extends TupleScheme<lexicalize_parse_tree_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lexicalize_parse_tree_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTree()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTree()) {
          oprot.writeString(struct.tree);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lexicalize_parse_tree_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tree = iprot.readString();
          struct.setTreeIsSet(true);
        }
      }
    }

  }

  public static class lexicalize_parse_tree_result implements org.apache.thrift.TBase<lexicalize_parse_tree_result, lexicalize_parse_tree_result._Fields>, java.io.Serializable, Cloneable, Comparable<lexicalize_parse_tree_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lexicalize_parse_tree_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lexicalize_parse_tree_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lexicalize_parse_tree_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lexicalize_parse_tree_result.class, metaDataMap);
    }

    public lexicalize_parse_tree_result() {
    }

    public lexicalize_parse_tree_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lexicalize_parse_tree_result(lexicalize_parse_tree_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public lexicalize_parse_tree_result deepCopy() {
      return new lexicalize_parse_tree_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public lexicalize_parse_tree_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lexicalize_parse_tree_result)
        return this.equals((lexicalize_parse_tree_result)that);
      return false;
    }

    public boolean equals(lexicalize_parse_tree_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(lexicalize_parse_tree_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lexicalize_parse_tree_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lexicalize_parse_tree_resultStandardSchemeFactory implements SchemeFactory {
      public lexicalize_parse_tree_resultStandardScheme getScheme() {
        return new lexicalize_parse_tree_resultStandardScheme();
      }
    }

    private static class lexicalize_parse_tree_resultStandardScheme extends StandardScheme<lexicalize_parse_tree_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lexicalize_parse_tree_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lexicalize_parse_tree_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lexicalize_parse_tree_resultTupleSchemeFactory implements SchemeFactory {
      public lexicalize_parse_tree_resultTupleScheme getScheme() {
        return new lexicalize_parse_tree_resultTupleScheme();
      }
    }

    private static class lexicalize_parse_tree_resultTupleScheme extends TupleScheme<lexicalize_parse_tree_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lexicalize_parse_tree_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lexicalize_parse_tree_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_entities_from_text_args implements org.apache.thrift.TBase<get_entities_from_text_args, get_entities_from_text_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_entities_from_text_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_entities_from_text_args");

    private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_entities_from_text_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_entities_from_text_argsTupleSchemeFactory());
    }

    public String text; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEXT((short)1, "text");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEXT
            return TEXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_entities_from_text_args.class, metaDataMap);
    }

    public get_entities_from_text_args() {
    }

    public get_entities_from_text_args(
      String text)
    {
      this();
      this.text = text;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_entities_from_text_args(get_entities_from_text_args other) {
      if (other.isSetText()) {
        this.text = other.text;
      }
    }

    public get_entities_from_text_args deepCopy() {
      return new get_entities_from_text_args(this);
    }

    @Override
    public void clear() {
      this.text = null;
    }

    public String getText() {
      return this.text;
    }

    public get_entities_from_text_args setText(String text) {
      this.text = text;
      return this;
    }

    public void unsetText() {
      this.text = null;
    }

    /** Returns true if field text is set (has been assigned a value) and false otherwise */
    public boolean isSetText() {
      return this.text != null;
    }

    public void setTextIsSet(boolean value) {
      if (!value) {
        this.text = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEXT:
        if (value == null) {
          unsetText();
        } else {
          setText((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEXT:
        return getText();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEXT:
        return isSetText();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_entities_from_text_args)
        return this.equals((get_entities_from_text_args)that);
      return false;
    }

    public boolean equals(get_entities_from_text_args that) {
      if (that == null)
        return false;

      boolean this_present_text = true && this.isSetText();
      boolean that_present_text = true && that.isSetText();
      if (this_present_text || that_present_text) {
        if (!(this_present_text && that_present_text))
          return false;
        if (!this.text.equals(that.text))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_text = true && (isSetText());
      list.add(present_text);
      if (present_text)
        list.add(text);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_entities_from_text_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetText()).compareTo(other.isSetText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_entities_from_text_args(");
      boolean first = true;

      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_entities_from_text_argsStandardSchemeFactory implements SchemeFactory {
      public get_entities_from_text_argsStandardScheme getScheme() {
        return new get_entities_from_text_argsStandardScheme();
      }
    }

    private static class get_entities_from_text_argsStandardScheme extends StandardScheme<get_entities_from_text_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_entities_from_text_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.text = iprot.readString();
                struct.setTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_entities_from_text_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.text != null) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          oprot.writeString(struct.text);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_entities_from_text_argsTupleSchemeFactory implements SchemeFactory {
      public get_entities_from_text_argsTupleScheme getScheme() {
        return new get_entities_from_text_argsTupleScheme();
      }
    }

    private static class get_entities_from_text_argsTupleScheme extends TupleScheme<get_entities_from_text_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_entities_from_text_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetText()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetText()) {
          oprot.writeString(struct.text);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_entities_from_text_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.text = iprot.readString();
          struct.setTextIsSet(true);
        }
      }
    }

  }

  public static class get_entities_from_text_result implements org.apache.thrift.TBase<get_entities_from_text_result, get_entities_from_text_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_entities_from_text_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_entities_from_text_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_entities_from_text_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_entities_from_text_resultTupleSchemeFactory());
    }

    public List<NamedEntity> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NamedEntity.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_entities_from_text_result.class, metaDataMap);
    }

    public get_entities_from_text_result() {
    }

    public get_entities_from_text_result(
      List<NamedEntity> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_entities_from_text_result(get_entities_from_text_result other) {
      if (other.isSetSuccess()) {
        List<NamedEntity> __this__success = new ArrayList<NamedEntity>(other.success.size());
        for (NamedEntity other_element : other.success) {
          __this__success.add(new NamedEntity(other_element));
        }
        this.success = __this__success;
      }
    }

    public get_entities_from_text_result deepCopy() {
      return new get_entities_from_text_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<NamedEntity> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(NamedEntity elem) {
      if (this.success == null) {
        this.success = new ArrayList<NamedEntity>();
      }
      this.success.add(elem);
    }

    public List<NamedEntity> getSuccess() {
      return this.success;
    }

    public get_entities_from_text_result setSuccess(List<NamedEntity> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<NamedEntity>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_entities_from_text_result)
        return this.equals((get_entities_from_text_result)that);
      return false;
    }

    public boolean equals(get_entities_from_text_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_entities_from_text_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_entities_from_text_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_entities_from_text_resultStandardSchemeFactory implements SchemeFactory {
      public get_entities_from_text_resultStandardScheme getScheme() {
        return new get_entities_from_text_resultStandardScheme();
      }
    }

    private static class get_entities_from_text_resultStandardScheme extends StandardScheme<get_entities_from_text_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_entities_from_text_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<NamedEntity>(_list40.size);
                  NamedEntity _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new NamedEntity();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_entities_from_text_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (NamedEntity _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_entities_from_text_resultTupleSchemeFactory implements SchemeFactory {
      public get_entities_from_text_resultTupleScheme getScheme() {
        return new get_entities_from_text_resultTupleScheme();
      }
    }

    private static class get_entities_from_text_resultTupleScheme extends TupleScheme<get_entities_from_text_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_entities_from_text_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (NamedEntity _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_entities_from_text_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<NamedEntity>(_list45.size);
            NamedEntity _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new NamedEntity();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_entities_from_tokens_args implements org.apache.thrift.TBase<get_entities_from_tokens_args, get_entities_from_tokens_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_entities_from_tokens_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_entities_from_tokens_args");

    private static final org.apache.thrift.protocol.TField TOKENS_FIELD_DESC = new org.apache.thrift.protocol.TField("tokens", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_entities_from_tokens_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_entities_from_tokens_argsTupleSchemeFactory());
    }

    public List<String> tokens; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKENS((short)1, "tokens");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKENS
            return TOKENS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKENS, new org.apache.thrift.meta_data.FieldMetaData("tokens", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_entities_from_tokens_args.class, metaDataMap);
    }

    public get_entities_from_tokens_args() {
    }

    public get_entities_from_tokens_args(
      List<String> tokens)
    {
      this();
      this.tokens = tokens;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_entities_from_tokens_args(get_entities_from_tokens_args other) {
      if (other.isSetTokens()) {
        List<String> __this__tokens = new ArrayList<String>(other.tokens);
        this.tokens = __this__tokens;
      }
    }

    public get_entities_from_tokens_args deepCopy() {
      return new get_entities_from_tokens_args(this);
    }

    @Override
    public void clear() {
      this.tokens = null;
    }

    public int getTokensSize() {
      return (this.tokens == null) ? 0 : this.tokens.size();
    }

    public java.util.Iterator<String> getTokensIterator() {
      return (this.tokens == null) ? null : this.tokens.iterator();
    }

    public void addToTokens(String elem) {
      if (this.tokens == null) {
        this.tokens = new ArrayList<String>();
      }
      this.tokens.add(elem);
    }

    public List<String> getTokens() {
      return this.tokens;
    }

    public get_entities_from_tokens_args setTokens(List<String> tokens) {
      this.tokens = tokens;
      return this;
    }

    public void unsetTokens() {
      this.tokens = null;
    }

    /** Returns true if field tokens is set (has been assigned a value) and false otherwise */
    public boolean isSetTokens() {
      return this.tokens != null;
    }

    public void setTokensIsSet(boolean value) {
      if (!value) {
        this.tokens = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKENS:
        if (value == null) {
          unsetTokens();
        } else {
          setTokens((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKENS:
        return getTokens();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKENS:
        return isSetTokens();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_entities_from_tokens_args)
        return this.equals((get_entities_from_tokens_args)that);
      return false;
    }

    public boolean equals(get_entities_from_tokens_args that) {
      if (that == null)
        return false;

      boolean this_present_tokens = true && this.isSetTokens();
      boolean that_present_tokens = true && that.isSetTokens();
      if (this_present_tokens || that_present_tokens) {
        if (!(this_present_tokens && that_present_tokens))
          return false;
        if (!this.tokens.equals(that.tokens))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tokens = true && (isSetTokens());
      list.add(present_tokens);
      if (present_tokens)
        list.add(tokens);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_entities_from_tokens_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTokens()).compareTo(other.isSetTokens());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokens()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokens, other.tokens);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_entities_from_tokens_args(");
      boolean first = true;

      sb.append("tokens:");
      if (this.tokens == null) {
        sb.append("null");
      } else {
        sb.append(this.tokens);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_entities_from_tokens_argsStandardSchemeFactory implements SchemeFactory {
      public get_entities_from_tokens_argsStandardScheme getScheme() {
        return new get_entities_from_tokens_argsStandardScheme();
      }
    }

    private static class get_entities_from_tokens_argsStandardScheme extends StandardScheme<get_entities_from_tokens_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_entities_from_tokens_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKENS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.tokens = new ArrayList<String>(_list48.size);
                  String _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = iprot.readString();
                    struct.tokens.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setTokensIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_entities_from_tokens_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tokens != null) {
          oprot.writeFieldBegin(TOKENS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tokens.size()));
            for (String _iter51 : struct.tokens)
            {
              oprot.writeString(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_entities_from_tokens_argsTupleSchemeFactory implements SchemeFactory {
      public get_entities_from_tokens_argsTupleScheme getScheme() {
        return new get_entities_from_tokens_argsTupleScheme();
      }
    }

    private static class get_entities_from_tokens_argsTupleScheme extends TupleScheme<get_entities_from_tokens_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_entities_from_tokens_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTokens()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTokens()) {
          {
            oprot.writeI32(struct.tokens.size());
            for (String _iter52 : struct.tokens)
            {
              oprot.writeString(_iter52);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_entities_from_tokens_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tokens = new ArrayList<String>(_list53.size);
            String _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = iprot.readString();
              struct.tokens.add(_elem54);
            }
          }
          struct.setTokensIsSet(true);
        }
      }
    }

  }

  public static class get_entities_from_tokens_result implements org.apache.thrift.TBase<get_entities_from_tokens_result, get_entities_from_tokens_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_entities_from_tokens_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_entities_from_tokens_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_entities_from_tokens_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_entities_from_tokens_resultTupleSchemeFactory());
    }

    public List<NamedEntity> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NamedEntity.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_entities_from_tokens_result.class, metaDataMap);
    }

    public get_entities_from_tokens_result() {
    }

    public get_entities_from_tokens_result(
      List<NamedEntity> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_entities_from_tokens_result(get_entities_from_tokens_result other) {
      if (other.isSetSuccess()) {
        List<NamedEntity> __this__success = new ArrayList<NamedEntity>(other.success.size());
        for (NamedEntity other_element : other.success) {
          __this__success.add(new NamedEntity(other_element));
        }
        this.success = __this__success;
      }
    }

    public get_entities_from_tokens_result deepCopy() {
      return new get_entities_from_tokens_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<NamedEntity> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(NamedEntity elem) {
      if (this.success == null) {
        this.success = new ArrayList<NamedEntity>();
      }
      this.success.add(elem);
    }

    public List<NamedEntity> getSuccess() {
      return this.success;
    }

    public get_entities_from_tokens_result setSuccess(List<NamedEntity> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<NamedEntity>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_entities_from_tokens_result)
        return this.equals((get_entities_from_tokens_result)that);
      return false;
    }

    public boolean equals(get_entities_from_tokens_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_entities_from_tokens_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_entities_from_tokens_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_entities_from_tokens_resultStandardSchemeFactory implements SchemeFactory {
      public get_entities_from_tokens_resultStandardScheme getScheme() {
        return new get_entities_from_tokens_resultStandardScheme();
      }
    }

    private static class get_entities_from_tokens_resultStandardScheme extends StandardScheme<get_entities_from_tokens_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_entities_from_tokens_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<NamedEntity>(_list56.size);
                  NamedEntity _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new NamedEntity();
                    _elem57.read(iprot);
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_entities_from_tokens_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (NamedEntity _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_entities_from_tokens_resultTupleSchemeFactory implements SchemeFactory {
      public get_entities_from_tokens_resultTupleScheme getScheme() {
        return new get_entities_from_tokens_resultTupleScheme();
      }
    }

    private static class get_entities_from_tokens_resultTupleScheme extends TupleScheme<get_entities_from_tokens_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_entities_from_tokens_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (NamedEntity _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_entities_from_tokens_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<NamedEntity>(_list61.size);
            NamedEntity _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new NamedEntity();
              _elem62.read(iprot);
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class get_entities_from_trees_args implements org.apache.thrift.TBase<get_entities_from_trees_args, get_entities_from_trees_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_entities_from_trees_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_entities_from_trees_args");

    private static final org.apache.thrift.protocol.TField TREES_FIELD_DESC = new org.apache.thrift.protocol.TField("trees", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_entities_from_trees_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_entities_from_trees_argsTupleSchemeFactory());
    }

    public List<String> trees; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREES((short)1, "trees");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREES
            return TREES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREES, new org.apache.thrift.meta_data.FieldMetaData("trees", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_entities_from_trees_args.class, metaDataMap);
    }

    public get_entities_from_trees_args() {
    }

    public get_entities_from_trees_args(
      List<String> trees)
    {
      this();
      this.trees = trees;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_entities_from_trees_args(get_entities_from_trees_args other) {
      if (other.isSetTrees()) {
        List<String> __this__trees = new ArrayList<String>(other.trees);
        this.trees = __this__trees;
      }
    }

    public get_entities_from_trees_args deepCopy() {
      return new get_entities_from_trees_args(this);
    }

    @Override
    public void clear() {
      this.trees = null;
    }

    public int getTreesSize() {
      return (this.trees == null) ? 0 : this.trees.size();
    }

    public java.util.Iterator<String> getTreesIterator() {
      return (this.trees == null) ? null : this.trees.iterator();
    }

    public void addToTrees(String elem) {
      if (this.trees == null) {
        this.trees = new ArrayList<String>();
      }
      this.trees.add(elem);
    }

    public List<String> getTrees() {
      return this.trees;
    }

    public get_entities_from_trees_args setTrees(List<String> trees) {
      this.trees = trees;
      return this;
    }

    public void unsetTrees() {
      this.trees = null;
    }

    /** Returns true if field trees is set (has been assigned a value) and false otherwise */
    public boolean isSetTrees() {
      return this.trees != null;
    }

    public void setTreesIsSet(boolean value) {
      if (!value) {
        this.trees = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREES:
        if (value == null) {
          unsetTrees();
        } else {
          setTrees((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREES:
        return getTrees();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREES:
        return isSetTrees();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_entities_from_trees_args)
        return this.equals((get_entities_from_trees_args)that);
      return false;
    }

    public boolean equals(get_entities_from_trees_args that) {
      if (that == null)
        return false;

      boolean this_present_trees = true && this.isSetTrees();
      boolean that_present_trees = true && that.isSetTrees();
      if (this_present_trees || that_present_trees) {
        if (!(this_present_trees && that_present_trees))
          return false;
        if (!this.trees.equals(that.trees))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_trees = true && (isSetTrees());
      list.add(present_trees);
      if (present_trees)
        list.add(trees);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_entities_from_trees_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTrees()).compareTo(other.isSetTrees());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTrees()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trees, other.trees);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_entities_from_trees_args(");
      boolean first = true;

      sb.append("trees:");
      if (this.trees == null) {
        sb.append("null");
      } else {
        sb.append(this.trees);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_entities_from_trees_argsStandardSchemeFactory implements SchemeFactory {
      public get_entities_from_trees_argsStandardScheme getScheme() {
        return new get_entities_from_trees_argsStandardScheme();
      }
    }

    private static class get_entities_from_trees_argsStandardScheme extends StandardScheme<get_entities_from_trees_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_entities_from_trees_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.trees = new ArrayList<String>(_list64.size);
                  String _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = iprot.readString();
                    struct.trees.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setTreesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_entities_from_trees_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.trees != null) {
          oprot.writeFieldBegin(TREES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.trees.size()));
            for (String _iter67 : struct.trees)
            {
              oprot.writeString(_iter67);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_entities_from_trees_argsTupleSchemeFactory implements SchemeFactory {
      public get_entities_from_trees_argsTupleScheme getScheme() {
        return new get_entities_from_trees_argsTupleScheme();
      }
    }

    private static class get_entities_from_trees_argsTupleScheme extends TupleScheme<get_entities_from_trees_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_entities_from_trees_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTrees()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTrees()) {
          {
            oprot.writeI32(struct.trees.size());
            for (String _iter68 : struct.trees)
            {
              oprot.writeString(_iter68);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_entities_from_trees_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.trees = new ArrayList<String>(_list69.size);
            String _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = iprot.readString();
              struct.trees.add(_elem70);
            }
          }
          struct.setTreesIsSet(true);
        }
      }
    }

  }

  public static class get_entities_from_trees_result implements org.apache.thrift.TBase<get_entities_from_trees_result, get_entities_from_trees_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_entities_from_trees_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_entities_from_trees_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_entities_from_trees_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_entities_from_trees_resultTupleSchemeFactory());
    }

    public List<NamedEntity> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NamedEntity.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_entities_from_trees_result.class, metaDataMap);
    }

    public get_entities_from_trees_result() {
    }

    public get_entities_from_trees_result(
      List<NamedEntity> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_entities_from_trees_result(get_entities_from_trees_result other) {
      if (other.isSetSuccess()) {
        List<NamedEntity> __this__success = new ArrayList<NamedEntity>(other.success.size());
        for (NamedEntity other_element : other.success) {
          __this__success.add(new NamedEntity(other_element));
        }
        this.success = __this__success;
      }
    }

    public get_entities_from_trees_result deepCopy() {
      return new get_entities_from_trees_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<NamedEntity> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(NamedEntity elem) {
      if (this.success == null) {
        this.success = new ArrayList<NamedEntity>();
      }
      this.success.add(elem);
    }

    public List<NamedEntity> getSuccess() {
      return this.success;
    }

    public get_entities_from_trees_result setSuccess(List<NamedEntity> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<NamedEntity>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_entities_from_trees_result)
        return this.equals((get_entities_from_trees_result)that);
      return false;
    }

    public boolean equals(get_entities_from_trees_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_entities_from_trees_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_entities_from_trees_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_entities_from_trees_resultStandardSchemeFactory implements SchemeFactory {
      public get_entities_from_trees_resultStandardScheme getScheme() {
        return new get_entities_from_trees_resultStandardScheme();
      }
    }

    private static class get_entities_from_trees_resultStandardScheme extends StandardScheme<get_entities_from_trees_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_entities_from_trees_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<NamedEntity>(_list72.size);
                  NamedEntity _elem73;
                  for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                  {
                    _elem73 = new NamedEntity();
                    _elem73.read(iprot);
                    struct.success.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_entities_from_trees_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (NamedEntity _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_entities_from_trees_resultTupleSchemeFactory implements SchemeFactory {
      public get_entities_from_trees_resultTupleScheme getScheme() {
        return new get_entities_from_trees_resultTupleScheme();
      }
    }

    private static class get_entities_from_trees_resultTupleScheme extends TupleScheme<get_entities_from_trees_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_entities_from_trees_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (NamedEntity _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_entities_from_trees_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<NamedEntity>(_list77.size);
            NamedEntity _elem78;
            for (int _i79 = 0; _i79 < _list77.size; ++_i79)
            {
              _elem78 = new NamedEntity();
              _elem78.read(iprot);
              struct.success.add(_elem78);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class resolve_coreferences_in_text_args implements org.apache.thrift.TBase<resolve_coreferences_in_text_args, resolve_coreferences_in_text_args._Fields>, java.io.Serializable, Cloneable, Comparable<resolve_coreferences_in_text_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resolve_coreferences_in_text_args");

    private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resolve_coreferences_in_text_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resolve_coreferences_in_text_argsTupleSchemeFactory());
    }

    public String text; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEXT((short)1, "text");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEXT
            return TEXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resolve_coreferences_in_text_args.class, metaDataMap);
    }

    public resolve_coreferences_in_text_args() {
    }

    public resolve_coreferences_in_text_args(
      String text)
    {
      this();
      this.text = text;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resolve_coreferences_in_text_args(resolve_coreferences_in_text_args other) {
      if (other.isSetText()) {
        this.text = other.text;
      }
    }

    public resolve_coreferences_in_text_args deepCopy() {
      return new resolve_coreferences_in_text_args(this);
    }

    @Override
    public void clear() {
      this.text = null;
    }

    public String getText() {
      return this.text;
    }

    public resolve_coreferences_in_text_args setText(String text) {
      this.text = text;
      return this;
    }

    public void unsetText() {
      this.text = null;
    }

    /** Returns true if field text is set (has been assigned a value) and false otherwise */
    public boolean isSetText() {
      return this.text != null;
    }

    public void setTextIsSet(boolean value) {
      if (!value) {
        this.text = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEXT:
        if (value == null) {
          unsetText();
        } else {
          setText((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEXT:
        return getText();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEXT:
        return isSetText();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resolve_coreferences_in_text_args)
        return this.equals((resolve_coreferences_in_text_args)that);
      return false;
    }

    public boolean equals(resolve_coreferences_in_text_args that) {
      if (that == null)
        return false;

      boolean this_present_text = true && this.isSetText();
      boolean that_present_text = true && that.isSetText();
      if (this_present_text || that_present_text) {
        if (!(this_present_text && that_present_text))
          return false;
        if (!this.text.equals(that.text))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_text = true && (isSetText());
      list.add(present_text);
      if (present_text)
        list.add(text);

      return list.hashCode();
    }

    @Override
    public int compareTo(resolve_coreferences_in_text_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetText()).compareTo(other.isSetText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resolve_coreferences_in_text_args(");
      boolean first = true;

      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resolve_coreferences_in_text_argsStandardSchemeFactory implements SchemeFactory {
      public resolve_coreferences_in_text_argsStandardScheme getScheme() {
        return new resolve_coreferences_in_text_argsStandardScheme();
      }
    }

    private static class resolve_coreferences_in_text_argsStandardScheme extends StandardScheme<resolve_coreferences_in_text_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resolve_coreferences_in_text_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.text = iprot.readString();
                struct.setTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resolve_coreferences_in_text_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.text != null) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          oprot.writeString(struct.text);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resolve_coreferences_in_text_argsTupleSchemeFactory implements SchemeFactory {
      public resolve_coreferences_in_text_argsTupleScheme getScheme() {
        return new resolve_coreferences_in_text_argsTupleScheme();
      }
    }

    private static class resolve_coreferences_in_text_argsTupleScheme extends TupleScheme<resolve_coreferences_in_text_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resolve_coreferences_in_text_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetText()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetText()) {
          oprot.writeString(struct.text);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resolve_coreferences_in_text_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.text = iprot.readString();
          struct.setTextIsSet(true);
        }
      }
    }

  }

  public static class resolve_coreferences_in_text_result implements org.apache.thrift.TBase<resolve_coreferences_in_text_result, resolve_coreferences_in_text_result._Fields>, java.io.Serializable, Cloneable, Comparable<resolve_coreferences_in_text_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resolve_coreferences_in_text_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resolve_coreferences_in_text_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resolve_coreferences_in_text_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resolve_coreferences_in_text_result.class, metaDataMap);
    }

    public resolve_coreferences_in_text_result() {
    }

    public resolve_coreferences_in_text_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resolve_coreferences_in_text_result(resolve_coreferences_in_text_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public resolve_coreferences_in_text_result deepCopy() {
      return new resolve_coreferences_in_text_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public resolve_coreferences_in_text_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resolve_coreferences_in_text_result)
        return this.equals((resolve_coreferences_in_text_result)that);
      return false;
    }

    public boolean equals(resolve_coreferences_in_text_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(resolve_coreferences_in_text_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resolve_coreferences_in_text_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resolve_coreferences_in_text_resultStandardSchemeFactory implements SchemeFactory {
      public resolve_coreferences_in_text_resultStandardScheme getScheme() {
        return new resolve_coreferences_in_text_resultStandardScheme();
      }
    }

    private static class resolve_coreferences_in_text_resultStandardScheme extends StandardScheme<resolve_coreferences_in_text_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resolve_coreferences_in_text_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list80.size);
                  String _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = iprot.readString();
                    struct.success.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resolve_coreferences_in_text_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter83 : struct.success)
            {
              oprot.writeString(_iter83);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resolve_coreferences_in_text_resultTupleSchemeFactory implements SchemeFactory {
      public resolve_coreferences_in_text_resultTupleScheme getScheme() {
        return new resolve_coreferences_in_text_resultTupleScheme();
      }
    }

    private static class resolve_coreferences_in_text_resultTupleScheme extends TupleScheme<resolve_coreferences_in_text_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resolve_coreferences_in_text_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter84 : struct.success)
            {
              oprot.writeString(_iter84);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resolve_coreferences_in_text_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list85.size);
            String _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = iprot.readString();
              struct.success.add(_elem86);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class resolve_coreferences_in_tokenized_sentences_args implements org.apache.thrift.TBase<resolve_coreferences_in_tokenized_sentences_args, resolve_coreferences_in_tokenized_sentences_args._Fields>, java.io.Serializable, Cloneable, Comparable<resolve_coreferences_in_tokenized_sentences_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resolve_coreferences_in_tokenized_sentences_args");

    private static final org.apache.thrift.protocol.TField SENTENCES_WITH_TOKENS_SEPARATED_BY_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("sentencesWithTokensSeparatedBySpace", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resolve_coreferences_in_tokenized_sentences_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resolve_coreferences_in_tokenized_sentences_argsTupleSchemeFactory());
    }

    public List<String> sentencesWithTokensSeparatedBySpace; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SENTENCES_WITH_TOKENS_SEPARATED_BY_SPACE((short)1, "sentencesWithTokensSeparatedBySpace");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SENTENCES_WITH_TOKENS_SEPARATED_BY_SPACE
            return SENTENCES_WITH_TOKENS_SEPARATED_BY_SPACE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SENTENCES_WITH_TOKENS_SEPARATED_BY_SPACE, new org.apache.thrift.meta_data.FieldMetaData("sentencesWithTokensSeparatedBySpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resolve_coreferences_in_tokenized_sentences_args.class, metaDataMap);
    }

    public resolve_coreferences_in_tokenized_sentences_args() {
    }

    public resolve_coreferences_in_tokenized_sentences_args(
      List<String> sentencesWithTokensSeparatedBySpace)
    {
      this();
      this.sentencesWithTokensSeparatedBySpace = sentencesWithTokensSeparatedBySpace;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resolve_coreferences_in_tokenized_sentences_args(resolve_coreferences_in_tokenized_sentences_args other) {
      if (other.isSetSentencesWithTokensSeparatedBySpace()) {
        List<String> __this__sentencesWithTokensSeparatedBySpace = new ArrayList<String>(other.sentencesWithTokensSeparatedBySpace);
        this.sentencesWithTokensSeparatedBySpace = __this__sentencesWithTokensSeparatedBySpace;
      }
    }

    public resolve_coreferences_in_tokenized_sentences_args deepCopy() {
      return new resolve_coreferences_in_tokenized_sentences_args(this);
    }

    @Override
    public void clear() {
      this.sentencesWithTokensSeparatedBySpace = null;
    }

    public int getSentencesWithTokensSeparatedBySpaceSize() {
      return (this.sentencesWithTokensSeparatedBySpace == null) ? 0 : this.sentencesWithTokensSeparatedBySpace.size();
    }

    public java.util.Iterator<String> getSentencesWithTokensSeparatedBySpaceIterator() {
      return (this.sentencesWithTokensSeparatedBySpace == null) ? null : this.sentencesWithTokensSeparatedBySpace.iterator();
    }

    public void addToSentencesWithTokensSeparatedBySpace(String elem) {
      if (this.sentencesWithTokensSeparatedBySpace == null) {
        this.sentencesWithTokensSeparatedBySpace = new ArrayList<String>();
      }
      this.sentencesWithTokensSeparatedBySpace.add(elem);
    }

    public List<String> getSentencesWithTokensSeparatedBySpace() {
      return this.sentencesWithTokensSeparatedBySpace;
    }

    public resolve_coreferences_in_tokenized_sentences_args setSentencesWithTokensSeparatedBySpace(List<String> sentencesWithTokensSeparatedBySpace) {
      this.sentencesWithTokensSeparatedBySpace = sentencesWithTokensSeparatedBySpace;
      return this;
    }

    public void unsetSentencesWithTokensSeparatedBySpace() {
      this.sentencesWithTokensSeparatedBySpace = null;
    }

    /** Returns true if field sentencesWithTokensSeparatedBySpace is set (has been assigned a value) and false otherwise */
    public boolean isSetSentencesWithTokensSeparatedBySpace() {
      return this.sentencesWithTokensSeparatedBySpace != null;
    }

    public void setSentencesWithTokensSeparatedBySpaceIsSet(boolean value) {
      if (!value) {
        this.sentencesWithTokensSeparatedBySpace = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SENTENCES_WITH_TOKENS_SEPARATED_BY_SPACE:
        if (value == null) {
          unsetSentencesWithTokensSeparatedBySpace();
        } else {
          setSentencesWithTokensSeparatedBySpace((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SENTENCES_WITH_TOKENS_SEPARATED_BY_SPACE:
        return getSentencesWithTokensSeparatedBySpace();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SENTENCES_WITH_TOKENS_SEPARATED_BY_SPACE:
        return isSetSentencesWithTokensSeparatedBySpace();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resolve_coreferences_in_tokenized_sentences_args)
        return this.equals((resolve_coreferences_in_tokenized_sentences_args)that);
      return false;
    }

    public boolean equals(resolve_coreferences_in_tokenized_sentences_args that) {
      if (that == null)
        return false;

      boolean this_present_sentencesWithTokensSeparatedBySpace = true && this.isSetSentencesWithTokensSeparatedBySpace();
      boolean that_present_sentencesWithTokensSeparatedBySpace = true && that.isSetSentencesWithTokensSeparatedBySpace();
      if (this_present_sentencesWithTokensSeparatedBySpace || that_present_sentencesWithTokensSeparatedBySpace) {
        if (!(this_present_sentencesWithTokensSeparatedBySpace && that_present_sentencesWithTokensSeparatedBySpace))
          return false;
        if (!this.sentencesWithTokensSeparatedBySpace.equals(that.sentencesWithTokensSeparatedBySpace))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sentencesWithTokensSeparatedBySpace = true && (isSetSentencesWithTokensSeparatedBySpace());
      list.add(present_sentencesWithTokensSeparatedBySpace);
      if (present_sentencesWithTokensSeparatedBySpace)
        list.add(sentencesWithTokensSeparatedBySpace);

      return list.hashCode();
    }

    @Override
    public int compareTo(resolve_coreferences_in_tokenized_sentences_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSentencesWithTokensSeparatedBySpace()).compareTo(other.isSetSentencesWithTokensSeparatedBySpace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSentencesWithTokensSeparatedBySpace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentencesWithTokensSeparatedBySpace, other.sentencesWithTokensSeparatedBySpace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resolve_coreferences_in_tokenized_sentences_args(");
      boolean first = true;

      sb.append("sentencesWithTokensSeparatedBySpace:");
      if (this.sentencesWithTokensSeparatedBySpace == null) {
        sb.append("null");
      } else {
        sb.append(this.sentencesWithTokensSeparatedBySpace);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resolve_coreferences_in_tokenized_sentences_argsStandardSchemeFactory implements SchemeFactory {
      public resolve_coreferences_in_tokenized_sentences_argsStandardScheme getScheme() {
        return new resolve_coreferences_in_tokenized_sentences_argsStandardScheme();
      }
    }

    private static class resolve_coreferences_in_tokenized_sentences_argsStandardScheme extends StandardScheme<resolve_coreferences_in_tokenized_sentences_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resolve_coreferences_in_tokenized_sentences_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SENTENCES_WITH_TOKENS_SEPARATED_BY_SPACE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.sentencesWithTokensSeparatedBySpace = new ArrayList<String>(_list88.size);
                  String _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = iprot.readString();
                    struct.sentencesWithTokensSeparatedBySpace.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setSentencesWithTokensSeparatedBySpaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resolve_coreferences_in_tokenized_sentences_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sentencesWithTokensSeparatedBySpace != null) {
          oprot.writeFieldBegin(SENTENCES_WITH_TOKENS_SEPARATED_BY_SPACE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sentencesWithTokensSeparatedBySpace.size()));
            for (String _iter91 : struct.sentencesWithTokensSeparatedBySpace)
            {
              oprot.writeString(_iter91);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resolve_coreferences_in_tokenized_sentences_argsTupleSchemeFactory implements SchemeFactory {
      public resolve_coreferences_in_tokenized_sentences_argsTupleScheme getScheme() {
        return new resolve_coreferences_in_tokenized_sentences_argsTupleScheme();
      }
    }

    private static class resolve_coreferences_in_tokenized_sentences_argsTupleScheme extends TupleScheme<resolve_coreferences_in_tokenized_sentences_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resolve_coreferences_in_tokenized_sentences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSentencesWithTokensSeparatedBySpace()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSentencesWithTokensSeparatedBySpace()) {
          {
            oprot.writeI32(struct.sentencesWithTokensSeparatedBySpace.size());
            for (String _iter92 : struct.sentencesWithTokensSeparatedBySpace)
            {
              oprot.writeString(_iter92);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resolve_coreferences_in_tokenized_sentences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.sentencesWithTokensSeparatedBySpace = new ArrayList<String>(_list93.size);
            String _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = iprot.readString();
              struct.sentencesWithTokensSeparatedBySpace.add(_elem94);
            }
          }
          struct.setSentencesWithTokensSeparatedBySpaceIsSet(true);
        }
      }
    }

  }

  public static class resolve_coreferences_in_tokenized_sentences_result implements org.apache.thrift.TBase<resolve_coreferences_in_tokenized_sentences_result, resolve_coreferences_in_tokenized_sentences_result._Fields>, java.io.Serializable, Cloneable, Comparable<resolve_coreferences_in_tokenized_sentences_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resolve_coreferences_in_tokenized_sentences_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resolve_coreferences_in_tokenized_sentences_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resolve_coreferences_in_tokenized_sentences_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resolve_coreferences_in_tokenized_sentences_result.class, metaDataMap);
    }

    public resolve_coreferences_in_tokenized_sentences_result() {
    }

    public resolve_coreferences_in_tokenized_sentences_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resolve_coreferences_in_tokenized_sentences_result(resolve_coreferences_in_tokenized_sentences_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public resolve_coreferences_in_tokenized_sentences_result deepCopy() {
      return new resolve_coreferences_in_tokenized_sentences_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public resolve_coreferences_in_tokenized_sentences_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resolve_coreferences_in_tokenized_sentences_result)
        return this.equals((resolve_coreferences_in_tokenized_sentences_result)that);
      return false;
    }

    public boolean equals(resolve_coreferences_in_tokenized_sentences_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(resolve_coreferences_in_tokenized_sentences_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resolve_coreferences_in_tokenized_sentences_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resolve_coreferences_in_tokenized_sentences_resultStandardSchemeFactory implements SchemeFactory {
      public resolve_coreferences_in_tokenized_sentences_resultStandardScheme getScheme() {
        return new resolve_coreferences_in_tokenized_sentences_resultStandardScheme();
      }
    }

    private static class resolve_coreferences_in_tokenized_sentences_resultStandardScheme extends StandardScheme<resolve_coreferences_in_tokenized_sentences_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resolve_coreferences_in_tokenized_sentences_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list96.size);
                  String _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = iprot.readString();
                    struct.success.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resolve_coreferences_in_tokenized_sentences_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter99 : struct.success)
            {
              oprot.writeString(_iter99);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resolve_coreferences_in_tokenized_sentences_resultTupleSchemeFactory implements SchemeFactory {
      public resolve_coreferences_in_tokenized_sentences_resultTupleScheme getScheme() {
        return new resolve_coreferences_in_tokenized_sentences_resultTupleScheme();
      }
    }

    private static class resolve_coreferences_in_tokenized_sentences_resultTupleScheme extends TupleScheme<resolve_coreferences_in_tokenized_sentences_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resolve_coreferences_in_tokenized_sentences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter100 : struct.success)
            {
              oprot.writeString(_iter100);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resolve_coreferences_in_tokenized_sentences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list101.size);
            String _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = iprot.readString();
              struct.success.add(_elem102);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class resolve_coreferences_in_trees_args implements org.apache.thrift.TBase<resolve_coreferences_in_trees_args, resolve_coreferences_in_trees_args._Fields>, java.io.Serializable, Cloneable, Comparable<resolve_coreferences_in_trees_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resolve_coreferences_in_trees_args");

    private static final org.apache.thrift.protocol.TField TREES_FIELD_DESC = new org.apache.thrift.protocol.TField("trees", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resolve_coreferences_in_trees_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resolve_coreferences_in_trees_argsTupleSchemeFactory());
    }

    public List<String> trees; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TREES((short)1, "trees");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TREES
            return TREES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TREES, new org.apache.thrift.meta_data.FieldMetaData("trees", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resolve_coreferences_in_trees_args.class, metaDataMap);
    }

    public resolve_coreferences_in_trees_args() {
    }

    public resolve_coreferences_in_trees_args(
      List<String> trees)
    {
      this();
      this.trees = trees;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resolve_coreferences_in_trees_args(resolve_coreferences_in_trees_args other) {
      if (other.isSetTrees()) {
        List<String> __this__trees = new ArrayList<String>(other.trees);
        this.trees = __this__trees;
      }
    }

    public resolve_coreferences_in_trees_args deepCopy() {
      return new resolve_coreferences_in_trees_args(this);
    }

    @Override
    public void clear() {
      this.trees = null;
    }

    public int getTreesSize() {
      return (this.trees == null) ? 0 : this.trees.size();
    }

    public java.util.Iterator<String> getTreesIterator() {
      return (this.trees == null) ? null : this.trees.iterator();
    }

    public void addToTrees(String elem) {
      if (this.trees == null) {
        this.trees = new ArrayList<String>();
      }
      this.trees.add(elem);
    }

    public List<String> getTrees() {
      return this.trees;
    }

    public resolve_coreferences_in_trees_args setTrees(List<String> trees) {
      this.trees = trees;
      return this;
    }

    public void unsetTrees() {
      this.trees = null;
    }

    /** Returns true if field trees is set (has been assigned a value) and false otherwise */
    public boolean isSetTrees() {
      return this.trees != null;
    }

    public void setTreesIsSet(boolean value) {
      if (!value) {
        this.trees = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TREES:
        if (value == null) {
          unsetTrees();
        } else {
          setTrees((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TREES:
        return getTrees();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TREES:
        return isSetTrees();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resolve_coreferences_in_trees_args)
        return this.equals((resolve_coreferences_in_trees_args)that);
      return false;
    }

    public boolean equals(resolve_coreferences_in_trees_args that) {
      if (that == null)
        return false;

      boolean this_present_trees = true && this.isSetTrees();
      boolean that_present_trees = true && that.isSetTrees();
      if (this_present_trees || that_present_trees) {
        if (!(this_present_trees && that_present_trees))
          return false;
        if (!this.trees.equals(that.trees))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_trees = true && (isSetTrees());
      list.add(present_trees);
      if (present_trees)
        list.add(trees);

      return list.hashCode();
    }

    @Override
    public int compareTo(resolve_coreferences_in_trees_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTrees()).compareTo(other.isSetTrees());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTrees()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trees, other.trees);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resolve_coreferences_in_trees_args(");
      boolean first = true;

      sb.append("trees:");
      if (this.trees == null) {
        sb.append("null");
      } else {
        sb.append(this.trees);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resolve_coreferences_in_trees_argsStandardSchemeFactory implements SchemeFactory {
      public resolve_coreferences_in_trees_argsStandardScheme getScheme() {
        return new resolve_coreferences_in_trees_argsStandardScheme();
      }
    }

    private static class resolve_coreferences_in_trees_argsStandardScheme extends StandardScheme<resolve_coreferences_in_trees_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resolve_coreferences_in_trees_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TREES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.trees = new ArrayList<String>(_list104.size);
                  String _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = iprot.readString();
                    struct.trees.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setTreesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resolve_coreferences_in_trees_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.trees != null) {
          oprot.writeFieldBegin(TREES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.trees.size()));
            for (String _iter107 : struct.trees)
            {
              oprot.writeString(_iter107);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resolve_coreferences_in_trees_argsTupleSchemeFactory implements SchemeFactory {
      public resolve_coreferences_in_trees_argsTupleScheme getScheme() {
        return new resolve_coreferences_in_trees_argsTupleScheme();
      }
    }

    private static class resolve_coreferences_in_trees_argsTupleScheme extends TupleScheme<resolve_coreferences_in_trees_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resolve_coreferences_in_trees_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTrees()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTrees()) {
          {
            oprot.writeI32(struct.trees.size());
            for (String _iter108 : struct.trees)
            {
              oprot.writeString(_iter108);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resolve_coreferences_in_trees_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.trees = new ArrayList<String>(_list109.size);
            String _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = iprot.readString();
              struct.trees.add(_elem110);
            }
          }
          struct.setTreesIsSet(true);
        }
      }
    }

  }

  public static class resolve_coreferences_in_trees_result implements org.apache.thrift.TBase<resolve_coreferences_in_trees_result, resolve_coreferences_in_trees_result._Fields>, java.io.Serializable, Cloneable, Comparable<resolve_coreferences_in_trees_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resolve_coreferences_in_trees_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resolve_coreferences_in_trees_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resolve_coreferences_in_trees_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resolve_coreferences_in_trees_result.class, metaDataMap);
    }

    public resolve_coreferences_in_trees_result() {
    }

    public resolve_coreferences_in_trees_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resolve_coreferences_in_trees_result(resolve_coreferences_in_trees_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public resolve_coreferences_in_trees_result deepCopy() {
      return new resolve_coreferences_in_trees_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public resolve_coreferences_in_trees_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resolve_coreferences_in_trees_result)
        return this.equals((resolve_coreferences_in_trees_result)that);
      return false;
    }

    public boolean equals(resolve_coreferences_in_trees_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(resolve_coreferences_in_trees_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resolve_coreferences_in_trees_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resolve_coreferences_in_trees_resultStandardSchemeFactory implements SchemeFactory {
      public resolve_coreferences_in_trees_resultStandardScheme getScheme() {
        return new resolve_coreferences_in_trees_resultStandardScheme();
      }
    }

    private static class resolve_coreferences_in_trees_resultStandardScheme extends StandardScheme<resolve_coreferences_in_trees_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resolve_coreferences_in_trees_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list112.size);
                  String _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = iprot.readString();
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resolve_coreferences_in_trees_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter115 : struct.success)
            {
              oprot.writeString(_iter115);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resolve_coreferences_in_trees_resultTupleSchemeFactory implements SchemeFactory {
      public resolve_coreferences_in_trees_resultTupleScheme getScheme() {
        return new resolve_coreferences_in_trees_resultTupleScheme();
      }
    }

    private static class resolve_coreferences_in_trees_resultTupleScheme extends TupleScheme<resolve_coreferences_in_trees_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resolve_coreferences_in_trees_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter116 : struct.success)
            {
              oprot.writeString(_iter116);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resolve_coreferences_in_trees_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list117.size);
            String _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = iprot.readString();
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class evaluate_tregex_pattern_args implements org.apache.thrift.TBase<evaluate_tregex_pattern_args, evaluate_tregex_pattern_args._Fields>, java.io.Serializable, Cloneable, Comparable<evaluate_tregex_pattern_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("evaluate_tregex_pattern_args");

    private static final org.apache.thrift.protocol.TField PARSE_TREE_FIELD_DESC = new org.apache.thrift.protocol.TField("parseTree", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TREGEX_PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("tregexPattern", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new evaluate_tregex_pattern_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new evaluate_tregex_pattern_argsTupleSchemeFactory());
    }

    public String parseTree; // required
    public String tregexPattern; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARSE_TREE((short)1, "parseTree"),
      TREGEX_PATTERN((short)2, "tregexPattern");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARSE_TREE
            return PARSE_TREE;
          case 2: // TREGEX_PATTERN
            return TREGEX_PATTERN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARSE_TREE, new org.apache.thrift.meta_data.FieldMetaData("parseTree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TREGEX_PATTERN, new org.apache.thrift.meta_data.FieldMetaData("tregexPattern", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(evaluate_tregex_pattern_args.class, metaDataMap);
    }

    public evaluate_tregex_pattern_args() {
    }

    public evaluate_tregex_pattern_args(
      String parseTree,
      String tregexPattern)
    {
      this();
      this.parseTree = parseTree;
      this.tregexPattern = tregexPattern;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public evaluate_tregex_pattern_args(evaluate_tregex_pattern_args other) {
      if (other.isSetParseTree()) {
        this.parseTree = other.parseTree;
      }
      if (other.isSetTregexPattern()) {
        this.tregexPattern = other.tregexPattern;
      }
    }

    public evaluate_tregex_pattern_args deepCopy() {
      return new evaluate_tregex_pattern_args(this);
    }

    @Override
    public void clear() {
      this.parseTree = null;
      this.tregexPattern = null;
    }

    public String getParseTree() {
      return this.parseTree;
    }

    public evaluate_tregex_pattern_args setParseTree(String parseTree) {
      this.parseTree = parseTree;
      return this;
    }

    public void unsetParseTree() {
      this.parseTree = null;
    }

    /** Returns true if field parseTree is set (has been assigned a value) and false otherwise */
    public boolean isSetParseTree() {
      return this.parseTree != null;
    }

    public void setParseTreeIsSet(boolean value) {
      if (!value) {
        this.parseTree = null;
      }
    }

    public String getTregexPattern() {
      return this.tregexPattern;
    }

    public evaluate_tregex_pattern_args setTregexPattern(String tregexPattern) {
      this.tregexPattern = tregexPattern;
      return this;
    }

    public void unsetTregexPattern() {
      this.tregexPattern = null;
    }

    /** Returns true if field tregexPattern is set (has been assigned a value) and false otherwise */
    public boolean isSetTregexPattern() {
      return this.tregexPattern != null;
    }

    public void setTregexPatternIsSet(boolean value) {
      if (!value) {
        this.tregexPattern = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARSE_TREE:
        if (value == null) {
          unsetParseTree();
        } else {
          setParseTree((String)value);
        }
        break;

      case TREGEX_PATTERN:
        if (value == null) {
          unsetTregexPattern();
        } else {
          setTregexPattern((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARSE_TREE:
        return getParseTree();

      case TREGEX_PATTERN:
        return getTregexPattern();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARSE_TREE:
        return isSetParseTree();
      case TREGEX_PATTERN:
        return isSetTregexPattern();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof evaluate_tregex_pattern_args)
        return this.equals((evaluate_tregex_pattern_args)that);
      return false;
    }

    public boolean equals(evaluate_tregex_pattern_args that) {
      if (that == null)
        return false;

      boolean this_present_parseTree = true && this.isSetParseTree();
      boolean that_present_parseTree = true && that.isSetParseTree();
      if (this_present_parseTree || that_present_parseTree) {
        if (!(this_present_parseTree && that_present_parseTree))
          return false;
        if (!this.parseTree.equals(that.parseTree))
          return false;
      }

      boolean this_present_tregexPattern = true && this.isSetTregexPattern();
      boolean that_present_tregexPattern = true && that.isSetTregexPattern();
      if (this_present_tregexPattern || that_present_tregexPattern) {
        if (!(this_present_tregexPattern && that_present_tregexPattern))
          return false;
        if (!this.tregexPattern.equals(that.tregexPattern))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_parseTree = true && (isSetParseTree());
      list.add(present_parseTree);
      if (present_parseTree)
        list.add(parseTree);

      boolean present_tregexPattern = true && (isSetTregexPattern());
      list.add(present_tregexPattern);
      if (present_tregexPattern)
        list.add(tregexPattern);

      return list.hashCode();
    }

    @Override
    public int compareTo(evaluate_tregex_pattern_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParseTree()).compareTo(other.isSetParseTree());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParseTree()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parseTree, other.parseTree);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTregexPattern()).compareTo(other.isSetTregexPattern());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTregexPattern()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tregexPattern, other.tregexPattern);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("evaluate_tregex_pattern_args(");
      boolean first = true;

      sb.append("parseTree:");
      if (this.parseTree == null) {
        sb.append("null");
      } else {
        sb.append(this.parseTree);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tregexPattern:");
      if (this.tregexPattern == null) {
        sb.append("null");
      } else {
        sb.append(this.tregexPattern);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class evaluate_tregex_pattern_argsStandardSchemeFactory implements SchemeFactory {
      public evaluate_tregex_pattern_argsStandardScheme getScheme() {
        return new evaluate_tregex_pattern_argsStandardScheme();
      }
    }

    private static class evaluate_tregex_pattern_argsStandardScheme extends StandardScheme<evaluate_tregex_pattern_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, evaluate_tregex_pattern_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARSE_TREE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parseTree = iprot.readString();
                struct.setParseTreeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TREGEX_PATTERN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tregexPattern = iprot.readString();
                struct.setTregexPatternIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, evaluate_tregex_pattern_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.parseTree != null) {
          oprot.writeFieldBegin(PARSE_TREE_FIELD_DESC);
          oprot.writeString(struct.parseTree);
          oprot.writeFieldEnd();
        }
        if (struct.tregexPattern != null) {
          oprot.writeFieldBegin(TREGEX_PATTERN_FIELD_DESC);
          oprot.writeString(struct.tregexPattern);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class evaluate_tregex_pattern_argsTupleSchemeFactory implements SchemeFactory {
      public evaluate_tregex_pattern_argsTupleScheme getScheme() {
        return new evaluate_tregex_pattern_argsTupleScheme();
      }
    }

    private static class evaluate_tregex_pattern_argsTupleScheme extends TupleScheme<evaluate_tregex_pattern_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, evaluate_tregex_pattern_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParseTree()) {
          optionals.set(0);
        }
        if (struct.isSetTregexPattern()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParseTree()) {
          oprot.writeString(struct.parseTree);
        }
        if (struct.isSetTregexPattern()) {
          oprot.writeString(struct.tregexPattern);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, evaluate_tregex_pattern_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.parseTree = iprot.readString();
          struct.setParseTreeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tregexPattern = iprot.readString();
          struct.setTregexPatternIsSet(true);
        }
      }
    }

  }

  public static class evaluate_tregex_pattern_result implements org.apache.thrift.TBase<evaluate_tregex_pattern_result, evaluate_tregex_pattern_result._Fields>, java.io.Serializable, Cloneable, Comparable<evaluate_tregex_pattern_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("evaluate_tregex_pattern_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new evaluate_tregex_pattern_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new evaluate_tregex_pattern_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(evaluate_tregex_pattern_result.class, metaDataMap);
    }

    public evaluate_tregex_pattern_result() {
    }

    public evaluate_tregex_pattern_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public evaluate_tregex_pattern_result(evaluate_tregex_pattern_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public evaluate_tregex_pattern_result deepCopy() {
      return new evaluate_tregex_pattern_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public evaluate_tregex_pattern_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof evaluate_tregex_pattern_result)
        return this.equals((evaluate_tregex_pattern_result)that);
      return false;
    }

    public boolean equals(evaluate_tregex_pattern_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(evaluate_tregex_pattern_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("evaluate_tregex_pattern_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class evaluate_tregex_pattern_resultStandardSchemeFactory implements SchemeFactory {
      public evaluate_tregex_pattern_resultStandardScheme getScheme() {
        return new evaluate_tregex_pattern_resultStandardScheme();
      }
    }

    private static class evaluate_tregex_pattern_resultStandardScheme extends StandardScheme<evaluate_tregex_pattern_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, evaluate_tregex_pattern_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list120.size);
                  String _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = iprot.readString();
                    struct.success.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, evaluate_tregex_pattern_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter123 : struct.success)
            {
              oprot.writeString(_iter123);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class evaluate_tregex_pattern_resultTupleSchemeFactory implements SchemeFactory {
      public evaluate_tregex_pattern_resultTupleScheme getScheme() {
        return new evaluate_tregex_pattern_resultTupleScheme();
      }
    }

    private static class evaluate_tregex_pattern_resultTupleScheme extends TupleScheme<evaluate_tregex_pattern_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, evaluate_tregex_pattern_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter124 : struct.success)
            {
              oprot.writeString(_iter124);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, evaluate_tregex_pattern_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list125.size);
            String _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = iprot.readString();
              struct.success.add(_elem126);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class tag_text_args implements org.apache.thrift.TBase<tag_text_args, tag_text_args._Fields>, java.io.Serializable, Cloneable, Comparable<tag_text_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tag_text_args");

    private static final org.apache.thrift.protocol.TField UNTOKENIZED_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("untokenizedText", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tag_text_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tag_text_argsTupleSchemeFactory());
    }

    public String untokenizedText; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNTOKENIZED_TEXT((short)1, "untokenizedText");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNTOKENIZED_TEXT
            return UNTOKENIZED_TEXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNTOKENIZED_TEXT, new org.apache.thrift.meta_data.FieldMetaData("untokenizedText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tag_text_args.class, metaDataMap);
    }

    public tag_text_args() {
    }

    public tag_text_args(
      String untokenizedText)
    {
      this();
      this.untokenizedText = untokenizedText;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tag_text_args(tag_text_args other) {
      if (other.isSetUntokenizedText()) {
        this.untokenizedText = other.untokenizedText;
      }
    }

    public tag_text_args deepCopy() {
      return new tag_text_args(this);
    }

    @Override
    public void clear() {
      this.untokenizedText = null;
    }

    public String getUntokenizedText() {
      return this.untokenizedText;
    }

    public tag_text_args setUntokenizedText(String untokenizedText) {
      this.untokenizedText = untokenizedText;
      return this;
    }

    public void unsetUntokenizedText() {
      this.untokenizedText = null;
    }

    /** Returns true if field untokenizedText is set (has been assigned a value) and false otherwise */
    public boolean isSetUntokenizedText() {
      return this.untokenizedText != null;
    }

    public void setUntokenizedTextIsSet(boolean value) {
      if (!value) {
        this.untokenizedText = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UNTOKENIZED_TEXT:
        if (value == null) {
          unsetUntokenizedText();
        } else {
          setUntokenizedText((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UNTOKENIZED_TEXT:
        return getUntokenizedText();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UNTOKENIZED_TEXT:
        return isSetUntokenizedText();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tag_text_args)
        return this.equals((tag_text_args)that);
      return false;
    }

    public boolean equals(tag_text_args that) {
      if (that == null)
        return false;

      boolean this_present_untokenizedText = true && this.isSetUntokenizedText();
      boolean that_present_untokenizedText = true && that.isSetUntokenizedText();
      if (this_present_untokenizedText || that_present_untokenizedText) {
        if (!(this_present_untokenizedText && that_present_untokenizedText))
          return false;
        if (!this.untokenizedText.equals(that.untokenizedText))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_untokenizedText = true && (isSetUntokenizedText());
      list.add(present_untokenizedText);
      if (present_untokenizedText)
        list.add(untokenizedText);

      return list.hashCode();
    }

    @Override
    public int compareTo(tag_text_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUntokenizedText()).compareTo(other.isSetUntokenizedText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUntokenizedText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.untokenizedText, other.untokenizedText);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tag_text_args(");
      boolean first = true;

      sb.append("untokenizedText:");
      if (this.untokenizedText == null) {
        sb.append("null");
      } else {
        sb.append(this.untokenizedText);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tag_text_argsStandardSchemeFactory implements SchemeFactory {
      public tag_text_argsStandardScheme getScheme() {
        return new tag_text_argsStandardScheme();
      }
    }

    private static class tag_text_argsStandardScheme extends StandardScheme<tag_text_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tag_text_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNTOKENIZED_TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.untokenizedText = iprot.readString();
                struct.setUntokenizedTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tag_text_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.untokenizedText != null) {
          oprot.writeFieldBegin(UNTOKENIZED_TEXT_FIELD_DESC);
          oprot.writeString(struct.untokenizedText);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tag_text_argsTupleSchemeFactory implements SchemeFactory {
      public tag_text_argsTupleScheme getScheme() {
        return new tag_text_argsTupleScheme();
      }
    }

    private static class tag_text_argsTupleScheme extends TupleScheme<tag_text_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tag_text_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUntokenizedText()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUntokenizedText()) {
          oprot.writeString(struct.untokenizedText);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tag_text_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.untokenizedText = iprot.readString();
          struct.setUntokenizedTextIsSet(true);
        }
      }
    }

  }

  public static class tag_text_result implements org.apache.thrift.TBase<tag_text_result, tag_text_result._Fields>, java.io.Serializable, Cloneable, Comparable<tag_text_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tag_text_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tag_text_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tag_text_resultTupleSchemeFactory());
    }

    public List<List<TaggedToken>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TaggedToken.class)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tag_text_result.class, metaDataMap);
    }

    public tag_text_result() {
    }

    public tag_text_result(
      List<List<TaggedToken>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tag_text_result(tag_text_result other) {
      if (other.isSetSuccess()) {
        List<List<TaggedToken>> __this__success = new ArrayList<List<TaggedToken>>(other.success.size());
        for (List<TaggedToken> other_element : other.success) {
          List<TaggedToken> __this__success_copy = new ArrayList<TaggedToken>(other_element.size());
          for (TaggedToken other_element_element : other_element) {
            __this__success_copy.add(new TaggedToken(other_element_element));
          }
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public tag_text_result deepCopy() {
      return new tag_text_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<TaggedToken>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<TaggedToken> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<TaggedToken>>();
      }
      this.success.add(elem);
    }

    public List<List<TaggedToken>> getSuccess() {
      return this.success;
    }

    public tag_text_result setSuccess(List<List<TaggedToken>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<TaggedToken>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tag_text_result)
        return this.equals((tag_text_result)that);
      return false;
    }

    public boolean equals(tag_text_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(tag_text_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tag_text_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tag_text_resultStandardSchemeFactory implements SchemeFactory {
      public tag_text_resultStandardScheme getScheme() {
        return new tag_text_resultStandardScheme();
      }
    }

    private static class tag_text_resultStandardScheme extends StandardScheme<tag_text_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tag_text_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.success = new ArrayList<List<TaggedToken>>(_list128.size);
                  List<TaggedToken> _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    {
                      org.apache.thrift.protocol.TList _list131 = iprot.readListBegin();
                      _elem129 = new ArrayList<TaggedToken>(_list131.size);
                      TaggedToken _elem132;
                      for (int _i133 = 0; _i133 < _list131.size; ++_i133)
                      {
                        _elem132 = new TaggedToken();
                        _elem132.read(iprot);
                        _elem129.add(_elem132);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tag_text_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<TaggedToken> _iter134 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter134.size()));
                for (TaggedToken _iter135 : _iter134)
                {
                  _iter135.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tag_text_resultTupleSchemeFactory implements SchemeFactory {
      public tag_text_resultTupleScheme getScheme() {
        return new tag_text_resultTupleScheme();
      }
    }

    private static class tag_text_resultTupleScheme extends TupleScheme<tag_text_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tag_text_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<TaggedToken> _iter136 : struct.success)
            {
              {
                oprot.writeI32(_iter136.size());
                for (TaggedToken _iter137 : _iter136)
                {
                  _iter137.write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tag_text_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list138 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<TaggedToken>>(_list138.size);
            List<TaggedToken> _elem139;
            for (int _i140 = 0; _i140 < _list138.size; ++_i140)
            {
              {
                org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _elem139 = new ArrayList<TaggedToken>(_list141.size);
                TaggedToken _elem142;
                for (int _i143 = 0; _i143 < _list141.size; ++_i143)
                {
                  _elem142 = new TaggedToken();
                  _elem142.read(iprot);
                  _elem139.add(_elem142);
                }
              }
              struct.success.add(_elem139);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class tag_tokenized_sentence_args implements org.apache.thrift.TBase<tag_tokenized_sentence_args, tag_tokenized_sentence_args._Fields>, java.io.Serializable, Cloneable, Comparable<tag_tokenized_sentence_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tag_tokenized_sentence_args");

    private static final org.apache.thrift.protocol.TField TOKENIZED_SENTENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenizedSentence", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tag_tokenized_sentence_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tag_tokenized_sentence_argsTupleSchemeFactory());
    }

    public List<String> tokenizedSentence; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKENIZED_SENTENCE((short)1, "tokenizedSentence");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKENIZED_SENTENCE
            return TOKENIZED_SENTENCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKENIZED_SENTENCE, new org.apache.thrift.meta_data.FieldMetaData("tokenizedSentence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tag_tokenized_sentence_args.class, metaDataMap);
    }

    public tag_tokenized_sentence_args() {
    }

    public tag_tokenized_sentence_args(
      List<String> tokenizedSentence)
    {
      this();
      this.tokenizedSentence = tokenizedSentence;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tag_tokenized_sentence_args(tag_tokenized_sentence_args other) {
      if (other.isSetTokenizedSentence()) {
        List<String> __this__tokenizedSentence = new ArrayList<String>(other.tokenizedSentence);
        this.tokenizedSentence = __this__tokenizedSentence;
      }
    }

    public tag_tokenized_sentence_args deepCopy() {
      return new tag_tokenized_sentence_args(this);
    }

    @Override
    public void clear() {
      this.tokenizedSentence = null;
    }

    public int getTokenizedSentenceSize() {
      return (this.tokenizedSentence == null) ? 0 : this.tokenizedSentence.size();
    }

    public java.util.Iterator<String> getTokenizedSentenceIterator() {
      return (this.tokenizedSentence == null) ? null : this.tokenizedSentence.iterator();
    }

    public void addToTokenizedSentence(String elem) {
      if (this.tokenizedSentence == null) {
        this.tokenizedSentence = new ArrayList<String>();
      }
      this.tokenizedSentence.add(elem);
    }

    public List<String> getTokenizedSentence() {
      return this.tokenizedSentence;
    }

    public tag_tokenized_sentence_args setTokenizedSentence(List<String> tokenizedSentence) {
      this.tokenizedSentence = tokenizedSentence;
      return this;
    }

    public void unsetTokenizedSentence() {
      this.tokenizedSentence = null;
    }

    /** Returns true if field tokenizedSentence is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenizedSentence() {
      return this.tokenizedSentence != null;
    }

    public void setTokenizedSentenceIsSet(boolean value) {
      if (!value) {
        this.tokenizedSentence = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKENIZED_SENTENCE:
        if (value == null) {
          unsetTokenizedSentence();
        } else {
          setTokenizedSentence((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKENIZED_SENTENCE:
        return getTokenizedSentence();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKENIZED_SENTENCE:
        return isSetTokenizedSentence();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tag_tokenized_sentence_args)
        return this.equals((tag_tokenized_sentence_args)that);
      return false;
    }

    public boolean equals(tag_tokenized_sentence_args that) {
      if (that == null)
        return false;

      boolean this_present_tokenizedSentence = true && this.isSetTokenizedSentence();
      boolean that_present_tokenizedSentence = true && that.isSetTokenizedSentence();
      if (this_present_tokenizedSentence || that_present_tokenizedSentence) {
        if (!(this_present_tokenizedSentence && that_present_tokenizedSentence))
          return false;
        if (!this.tokenizedSentence.equals(that.tokenizedSentence))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tokenizedSentence = true && (isSetTokenizedSentence());
      list.add(present_tokenizedSentence);
      if (present_tokenizedSentence)
        list.add(tokenizedSentence);

      return list.hashCode();
    }

    @Override
    public int compareTo(tag_tokenized_sentence_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTokenizedSentence()).compareTo(other.isSetTokenizedSentence());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenizedSentence()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenizedSentence, other.tokenizedSentence);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tag_tokenized_sentence_args(");
      boolean first = true;

      sb.append("tokenizedSentence:");
      if (this.tokenizedSentence == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenizedSentence);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tag_tokenized_sentence_argsStandardSchemeFactory implements SchemeFactory {
      public tag_tokenized_sentence_argsStandardScheme getScheme() {
        return new tag_tokenized_sentence_argsStandardScheme();
      }
    }

    private static class tag_tokenized_sentence_argsStandardScheme extends StandardScheme<tag_tokenized_sentence_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tag_tokenized_sentence_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKENIZED_SENTENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.tokenizedSentence = new ArrayList<String>(_list144.size);
                  String _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = iprot.readString();
                    struct.tokenizedSentence.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setTokenizedSentenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tag_tokenized_sentence_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tokenizedSentence != null) {
          oprot.writeFieldBegin(TOKENIZED_SENTENCE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tokenizedSentence.size()));
            for (String _iter147 : struct.tokenizedSentence)
            {
              oprot.writeString(_iter147);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tag_tokenized_sentence_argsTupleSchemeFactory implements SchemeFactory {
      public tag_tokenized_sentence_argsTupleScheme getScheme() {
        return new tag_tokenized_sentence_argsTupleScheme();
      }
    }

    private static class tag_tokenized_sentence_argsTupleScheme extends TupleScheme<tag_tokenized_sentence_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tag_tokenized_sentence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTokenizedSentence()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTokenizedSentence()) {
          {
            oprot.writeI32(struct.tokenizedSentence.size());
            for (String _iter148 : struct.tokenizedSentence)
            {
              oprot.writeString(_iter148);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tag_tokenized_sentence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tokenizedSentence = new ArrayList<String>(_list149.size);
            String _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = iprot.readString();
              struct.tokenizedSentence.add(_elem150);
            }
          }
          struct.setTokenizedSentenceIsSet(true);
        }
      }
    }

  }

  public static class tag_tokenized_sentence_result implements org.apache.thrift.TBase<tag_tokenized_sentence_result, tag_tokenized_sentence_result._Fields>, java.io.Serializable, Cloneable, Comparable<tag_tokenized_sentence_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tag_tokenized_sentence_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tag_tokenized_sentence_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tag_tokenized_sentence_resultTupleSchemeFactory());
    }

    public List<TaggedToken> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TaggedToken.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tag_tokenized_sentence_result.class, metaDataMap);
    }

    public tag_tokenized_sentence_result() {
    }

    public tag_tokenized_sentence_result(
      List<TaggedToken> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tag_tokenized_sentence_result(tag_tokenized_sentence_result other) {
      if (other.isSetSuccess()) {
        List<TaggedToken> __this__success = new ArrayList<TaggedToken>(other.success.size());
        for (TaggedToken other_element : other.success) {
          __this__success.add(new TaggedToken(other_element));
        }
        this.success = __this__success;
      }
    }

    public tag_tokenized_sentence_result deepCopy() {
      return new tag_tokenized_sentence_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TaggedToken> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TaggedToken elem) {
      if (this.success == null) {
        this.success = new ArrayList<TaggedToken>();
      }
      this.success.add(elem);
    }

    public List<TaggedToken> getSuccess() {
      return this.success;
    }

    public tag_tokenized_sentence_result setSuccess(List<TaggedToken> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TaggedToken>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tag_tokenized_sentence_result)
        return this.equals((tag_tokenized_sentence_result)that);
      return false;
    }

    public boolean equals(tag_tokenized_sentence_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(tag_tokenized_sentence_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tag_tokenized_sentence_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tag_tokenized_sentence_resultStandardSchemeFactory implements SchemeFactory {
      public tag_tokenized_sentence_resultStandardScheme getScheme() {
        return new tag_tokenized_sentence_resultStandardScheme();
      }
    }

    private static class tag_tokenized_sentence_resultStandardScheme extends StandardScheme<tag_tokenized_sentence_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tag_tokenized_sentence_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                  struct.success = new ArrayList<TaggedToken>(_list152.size);
                  TaggedToken _elem153;
                  for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                  {
                    _elem153 = new TaggedToken();
                    _elem153.read(iprot);
                    struct.success.add(_elem153);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tag_tokenized_sentence_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TaggedToken _iter155 : struct.success)
            {
              _iter155.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tag_tokenized_sentence_resultTupleSchemeFactory implements SchemeFactory {
      public tag_tokenized_sentence_resultTupleScheme getScheme() {
        return new tag_tokenized_sentence_resultTupleScheme();
      }
    }

    private static class tag_tokenized_sentence_resultTupleScheme extends TupleScheme<tag_tokenized_sentence_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tag_tokenized_sentence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TaggedToken _iter156 : struct.success)
            {
              _iter156.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tag_tokenized_sentence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TaggedToken>(_list157.size);
            TaggedToken _elem158;
            for (int _i159 = 0; _i159 < _list157.size; ++_i159)
            {
              _elem158 = new TaggedToken();
              _elem158.read(iprot);
              struct.success.add(_elem158);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class tag_partially_tagged_tokenized_sentence_args implements org.apache.thrift.TBase<tag_partially_tagged_tokenized_sentence_args, tag_partially_tagged_tokenized_sentence_args._Fields>, java.io.Serializable, Cloneable, Comparable<tag_partially_tagged_tokenized_sentence_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tag_partially_tagged_tokenized_sentence_args");

    private static final org.apache.thrift.protocol.TField PTAGGEDTOKENIZED_SENTENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("ptaggedtokenizedSentence", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DIVIDER_FIELD_DESC = new org.apache.thrift.protocol.TField("divider", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tag_partially_tagged_tokenized_sentence_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tag_partially_tagged_tokenized_sentence_argsTupleSchemeFactory());
    }

    public String ptaggedtokenizedSentence; // required
    public String divider; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PTAGGEDTOKENIZED_SENTENCE((short)1, "ptaggedtokenizedSentence"),
      DIVIDER((short)2, "divider");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PTAGGEDTOKENIZED_SENTENCE
            return PTAGGEDTOKENIZED_SENTENCE;
          case 2: // DIVIDER
            return DIVIDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PTAGGEDTOKENIZED_SENTENCE, new org.apache.thrift.meta_data.FieldMetaData("ptaggedtokenizedSentence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DIVIDER, new org.apache.thrift.meta_data.FieldMetaData("divider", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tag_partially_tagged_tokenized_sentence_args.class, metaDataMap);
    }

    public tag_partially_tagged_tokenized_sentence_args() {
    }

    public tag_partially_tagged_tokenized_sentence_args(
      String ptaggedtokenizedSentence,
      String divider)
    {
      this();
      this.ptaggedtokenizedSentence = ptaggedtokenizedSentence;
      this.divider = divider;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tag_partially_tagged_tokenized_sentence_args(tag_partially_tagged_tokenized_sentence_args other) {
      if (other.isSetPtaggedtokenizedSentence()) {
        this.ptaggedtokenizedSentence = other.ptaggedtokenizedSentence;
      }
      if (other.isSetDivider()) {
        this.divider = other.divider;
      }
    }

    public tag_partially_tagged_tokenized_sentence_args deepCopy() {
      return new tag_partially_tagged_tokenized_sentence_args(this);
    }

    @Override
    public void clear() {
      this.ptaggedtokenizedSentence = null;
      this.divider = null;
    }

    public String getPtaggedtokenizedSentence() {
      return this.ptaggedtokenizedSentence;
    }

    public tag_partially_tagged_tokenized_sentence_args setPtaggedtokenizedSentence(String ptaggedtokenizedSentence) {
      this.ptaggedtokenizedSentence = ptaggedtokenizedSentence;
      return this;
    }

    public void unsetPtaggedtokenizedSentence() {
      this.ptaggedtokenizedSentence = null;
    }

    /** Returns true if field ptaggedtokenizedSentence is set (has been assigned a value) and false otherwise */
    public boolean isSetPtaggedtokenizedSentence() {
      return this.ptaggedtokenizedSentence != null;
    }

    public void setPtaggedtokenizedSentenceIsSet(boolean value) {
      if (!value) {
        this.ptaggedtokenizedSentence = null;
      }
    }

    public String getDivider() {
      return this.divider;
    }

    public tag_partially_tagged_tokenized_sentence_args setDivider(String divider) {
      this.divider = divider;
      return this;
    }

    public void unsetDivider() {
      this.divider = null;
    }

    /** Returns true if field divider is set (has been assigned a value) and false otherwise */
    public boolean isSetDivider() {
      return this.divider != null;
    }

    public void setDividerIsSet(boolean value) {
      if (!value) {
        this.divider = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PTAGGEDTOKENIZED_SENTENCE:
        if (value == null) {
          unsetPtaggedtokenizedSentence();
        } else {
          setPtaggedtokenizedSentence((String)value);
        }
        break;

      case DIVIDER:
        if (value == null) {
          unsetDivider();
        } else {
          setDivider((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PTAGGEDTOKENIZED_SENTENCE:
        return getPtaggedtokenizedSentence();

      case DIVIDER:
        return getDivider();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PTAGGEDTOKENIZED_SENTENCE:
        return isSetPtaggedtokenizedSentence();
      case DIVIDER:
        return isSetDivider();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tag_partially_tagged_tokenized_sentence_args)
        return this.equals((tag_partially_tagged_tokenized_sentence_args)that);
      return false;
    }

    public boolean equals(tag_partially_tagged_tokenized_sentence_args that) {
      if (that == null)
        return false;

      boolean this_present_ptaggedtokenizedSentence = true && this.isSetPtaggedtokenizedSentence();
      boolean that_present_ptaggedtokenizedSentence = true && that.isSetPtaggedtokenizedSentence();
      if (this_present_ptaggedtokenizedSentence || that_present_ptaggedtokenizedSentence) {
        if (!(this_present_ptaggedtokenizedSentence && that_present_ptaggedtokenizedSentence))
          return false;
        if (!this.ptaggedtokenizedSentence.equals(that.ptaggedtokenizedSentence))
          return false;
      }

      boolean this_present_divider = true && this.isSetDivider();
      boolean that_present_divider = true && that.isSetDivider();
      if (this_present_divider || that_present_divider) {
        if (!(this_present_divider && that_present_divider))
          return false;
        if (!this.divider.equals(that.divider))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ptaggedtokenizedSentence = true && (isSetPtaggedtokenizedSentence());
      list.add(present_ptaggedtokenizedSentence);
      if (present_ptaggedtokenizedSentence)
        list.add(ptaggedtokenizedSentence);

      boolean present_divider = true && (isSetDivider());
      list.add(present_divider);
      if (present_divider)
        list.add(divider);

      return list.hashCode();
    }

    @Override
    public int compareTo(tag_partially_tagged_tokenized_sentence_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPtaggedtokenizedSentence()).compareTo(other.isSetPtaggedtokenizedSentence());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPtaggedtokenizedSentence()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ptaggedtokenizedSentence, other.ptaggedtokenizedSentence);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDivider()).compareTo(other.isSetDivider());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDivider()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divider, other.divider);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tag_partially_tagged_tokenized_sentence_args(");
      boolean first = true;

      sb.append("ptaggedtokenizedSentence:");
      if (this.ptaggedtokenizedSentence == null) {
        sb.append("null");
      } else {
        sb.append(this.ptaggedtokenizedSentence);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("divider:");
      if (this.divider == null) {
        sb.append("null");
      } else {
        sb.append(this.divider);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tag_partially_tagged_tokenized_sentence_argsStandardSchemeFactory implements SchemeFactory {
      public tag_partially_tagged_tokenized_sentence_argsStandardScheme getScheme() {
        return new tag_partially_tagged_tokenized_sentence_argsStandardScheme();
      }
    }

    private static class tag_partially_tagged_tokenized_sentence_argsStandardScheme extends StandardScheme<tag_partially_tagged_tokenized_sentence_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tag_partially_tagged_tokenized_sentence_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PTAGGEDTOKENIZED_SENTENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ptaggedtokenizedSentence = iprot.readString();
                struct.setPtaggedtokenizedSentenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DIVIDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.divider = iprot.readString();
                struct.setDividerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tag_partially_tagged_tokenized_sentence_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ptaggedtokenizedSentence != null) {
          oprot.writeFieldBegin(PTAGGEDTOKENIZED_SENTENCE_FIELD_DESC);
          oprot.writeString(struct.ptaggedtokenizedSentence);
          oprot.writeFieldEnd();
        }
        if (struct.divider != null) {
          oprot.writeFieldBegin(DIVIDER_FIELD_DESC);
          oprot.writeString(struct.divider);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tag_partially_tagged_tokenized_sentence_argsTupleSchemeFactory implements SchemeFactory {
      public tag_partially_tagged_tokenized_sentence_argsTupleScheme getScheme() {
        return new tag_partially_tagged_tokenized_sentence_argsTupleScheme();
      }
    }

    private static class tag_partially_tagged_tokenized_sentence_argsTupleScheme extends TupleScheme<tag_partially_tagged_tokenized_sentence_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tag_partially_tagged_tokenized_sentence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPtaggedtokenizedSentence()) {
          optionals.set(0);
        }
        if (struct.isSetDivider()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPtaggedtokenizedSentence()) {
          oprot.writeString(struct.ptaggedtokenizedSentence);
        }
        if (struct.isSetDivider()) {
          oprot.writeString(struct.divider);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tag_partially_tagged_tokenized_sentence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ptaggedtokenizedSentence = iprot.readString();
          struct.setPtaggedtokenizedSentenceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.divider = iprot.readString();
          struct.setDividerIsSet(true);
        }
      }
    }

  }

  public static class tag_partially_tagged_tokenized_sentence_result implements org.apache.thrift.TBase<tag_partially_tagged_tokenized_sentence_result, tag_partially_tagged_tokenized_sentence_result._Fields>, java.io.Serializable, Cloneable, Comparable<tag_partially_tagged_tokenized_sentence_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tag_partially_tagged_tokenized_sentence_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tag_partially_tagged_tokenized_sentence_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tag_partially_tagged_tokenized_sentence_resultTupleSchemeFactory());
    }

    public List<TaggedToken> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TaggedToken.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tag_partially_tagged_tokenized_sentence_result.class, metaDataMap);
    }

    public tag_partially_tagged_tokenized_sentence_result() {
    }

    public tag_partially_tagged_tokenized_sentence_result(
      List<TaggedToken> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tag_partially_tagged_tokenized_sentence_result(tag_partially_tagged_tokenized_sentence_result other) {
      if (other.isSetSuccess()) {
        List<TaggedToken> __this__success = new ArrayList<TaggedToken>(other.success.size());
        for (TaggedToken other_element : other.success) {
          __this__success.add(new TaggedToken(other_element));
        }
        this.success = __this__success;
      }
    }

    public tag_partially_tagged_tokenized_sentence_result deepCopy() {
      return new tag_partially_tagged_tokenized_sentence_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TaggedToken> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TaggedToken elem) {
      if (this.success == null) {
        this.success = new ArrayList<TaggedToken>();
      }
      this.success.add(elem);
    }

    public List<TaggedToken> getSuccess() {
      return this.success;
    }

    public tag_partially_tagged_tokenized_sentence_result setSuccess(List<TaggedToken> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TaggedToken>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tag_partially_tagged_tokenized_sentence_result)
        return this.equals((tag_partially_tagged_tokenized_sentence_result)that);
      return false;
    }

    public boolean equals(tag_partially_tagged_tokenized_sentence_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(tag_partially_tagged_tokenized_sentence_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tag_partially_tagged_tokenized_sentence_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tag_partially_tagged_tokenized_sentence_resultStandardSchemeFactory implements SchemeFactory {
      public tag_partially_tagged_tokenized_sentence_resultStandardScheme getScheme() {
        return new tag_partially_tagged_tokenized_sentence_resultStandardScheme();
      }
    }

    private static class tag_partially_tagged_tokenized_sentence_resultStandardScheme extends StandardScheme<tag_partially_tagged_tokenized_sentence_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tag_partially_tagged_tokenized_sentence_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                  struct.success = new ArrayList<TaggedToken>(_list160.size);
                  TaggedToken _elem161;
                  for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                  {
                    _elem161 = new TaggedToken();
                    _elem161.read(iprot);
                    struct.success.add(_elem161);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tag_partially_tagged_tokenized_sentence_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TaggedToken _iter163 : struct.success)
            {
              _iter163.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tag_partially_tagged_tokenized_sentence_resultTupleSchemeFactory implements SchemeFactory {
      public tag_partially_tagged_tokenized_sentence_resultTupleScheme getScheme() {
        return new tag_partially_tagged_tokenized_sentence_resultTupleScheme();
      }
    }

    private static class tag_partially_tagged_tokenized_sentence_resultTupleScheme extends TupleScheme<tag_partially_tagged_tokenized_sentence_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tag_partially_tagged_tokenized_sentence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TaggedToken _iter164 : struct.success)
            {
              _iter164.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tag_partially_tagged_tokenized_sentence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TaggedToken>(_list165.size);
            TaggedToken _elem166;
            for (int _i167 = 0; _i167 < _list165.size; ++_i167)
            {
              _elem166 = new TaggedToken();
              _elem166.read(iprot);
              struct.success.add(_elem166);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class untokenize_sentence_args implements org.apache.thrift.TBase<untokenize_sentence_args, untokenize_sentence_args._Fields>, java.io.Serializable, Cloneable, Comparable<untokenize_sentence_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("untokenize_sentence_args");

    private static final org.apache.thrift.protocol.TField SENTENCE_TOKENS_FIELD_DESC = new org.apache.thrift.protocol.TField("sentenceTokens", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new untokenize_sentence_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new untokenize_sentence_argsTupleSchemeFactory());
    }

    public List<String> sentenceTokens; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SENTENCE_TOKENS((short)1, "sentenceTokens");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SENTENCE_TOKENS
            return SENTENCE_TOKENS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SENTENCE_TOKENS, new org.apache.thrift.meta_data.FieldMetaData("sentenceTokens", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(untokenize_sentence_args.class, metaDataMap);
    }

    public untokenize_sentence_args() {
    }

    public untokenize_sentence_args(
      List<String> sentenceTokens)
    {
      this();
      this.sentenceTokens = sentenceTokens;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public untokenize_sentence_args(untokenize_sentence_args other) {
      if (other.isSetSentenceTokens()) {
        List<String> __this__sentenceTokens = new ArrayList<String>(other.sentenceTokens);
        this.sentenceTokens = __this__sentenceTokens;
      }
    }

    public untokenize_sentence_args deepCopy() {
      return new untokenize_sentence_args(this);
    }

    @Override
    public void clear() {
      this.sentenceTokens = null;
    }

    public int getSentenceTokensSize() {
      return (this.sentenceTokens == null) ? 0 : this.sentenceTokens.size();
    }

    public java.util.Iterator<String> getSentenceTokensIterator() {
      return (this.sentenceTokens == null) ? null : this.sentenceTokens.iterator();
    }

    public void addToSentenceTokens(String elem) {
      if (this.sentenceTokens == null) {
        this.sentenceTokens = new ArrayList<String>();
      }
      this.sentenceTokens.add(elem);
    }

    public List<String> getSentenceTokens() {
      return this.sentenceTokens;
    }

    public untokenize_sentence_args setSentenceTokens(List<String> sentenceTokens) {
      this.sentenceTokens = sentenceTokens;
      return this;
    }

    public void unsetSentenceTokens() {
      this.sentenceTokens = null;
    }

    /** Returns true if field sentenceTokens is set (has been assigned a value) and false otherwise */
    public boolean isSetSentenceTokens() {
      return this.sentenceTokens != null;
    }

    public void setSentenceTokensIsSet(boolean value) {
      if (!value) {
        this.sentenceTokens = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SENTENCE_TOKENS:
        if (value == null) {
          unsetSentenceTokens();
        } else {
          setSentenceTokens((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SENTENCE_TOKENS:
        return getSentenceTokens();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SENTENCE_TOKENS:
        return isSetSentenceTokens();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof untokenize_sentence_args)
        return this.equals((untokenize_sentence_args)that);
      return false;
    }

    public boolean equals(untokenize_sentence_args that) {
      if (that == null)
        return false;

      boolean this_present_sentenceTokens = true && this.isSetSentenceTokens();
      boolean that_present_sentenceTokens = true && that.isSetSentenceTokens();
      if (this_present_sentenceTokens || that_present_sentenceTokens) {
        if (!(this_present_sentenceTokens && that_present_sentenceTokens))
          return false;
        if (!this.sentenceTokens.equals(that.sentenceTokens))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sentenceTokens = true && (isSetSentenceTokens());
      list.add(present_sentenceTokens);
      if (present_sentenceTokens)
        list.add(sentenceTokens);

      return list.hashCode();
    }

    @Override
    public int compareTo(untokenize_sentence_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSentenceTokens()).compareTo(other.isSetSentenceTokens());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSentenceTokens()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentenceTokens, other.sentenceTokens);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("untokenize_sentence_args(");
      boolean first = true;

      sb.append("sentenceTokens:");
      if (this.sentenceTokens == null) {
        sb.append("null");
      } else {
        sb.append(this.sentenceTokens);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class untokenize_sentence_argsStandardSchemeFactory implements SchemeFactory {
      public untokenize_sentence_argsStandardScheme getScheme() {
        return new untokenize_sentence_argsStandardScheme();
      }
    }

    private static class untokenize_sentence_argsStandardScheme extends StandardScheme<untokenize_sentence_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, untokenize_sentence_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SENTENCE_TOKENS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                  struct.sentenceTokens = new ArrayList<String>(_list168.size);
                  String _elem169;
                  for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                  {
                    _elem169 = iprot.readString();
                    struct.sentenceTokens.add(_elem169);
                  }
                  iprot.readListEnd();
                }
                struct.setSentenceTokensIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, untokenize_sentence_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sentenceTokens != null) {
          oprot.writeFieldBegin(SENTENCE_TOKENS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sentenceTokens.size()));
            for (String _iter171 : struct.sentenceTokens)
            {
              oprot.writeString(_iter171);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class untokenize_sentence_argsTupleSchemeFactory implements SchemeFactory {
      public untokenize_sentence_argsTupleScheme getScheme() {
        return new untokenize_sentence_argsTupleScheme();
      }
    }

    private static class untokenize_sentence_argsTupleScheme extends TupleScheme<untokenize_sentence_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, untokenize_sentence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSentenceTokens()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSentenceTokens()) {
          {
            oprot.writeI32(struct.sentenceTokens.size());
            for (String _iter172 : struct.sentenceTokens)
            {
              oprot.writeString(_iter172);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, untokenize_sentence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.sentenceTokens = new ArrayList<String>(_list173.size);
            String _elem174;
            for (int _i175 = 0; _i175 < _list173.size; ++_i175)
            {
              _elem174 = iprot.readString();
              struct.sentenceTokens.add(_elem174);
            }
          }
          struct.setSentenceTokensIsSet(true);
        }
      }
    }

  }

  public static class untokenize_sentence_result implements org.apache.thrift.TBase<untokenize_sentence_result, untokenize_sentence_result._Fields>, java.io.Serializable, Cloneable, Comparable<untokenize_sentence_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("untokenize_sentence_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new untokenize_sentence_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new untokenize_sentence_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(untokenize_sentence_result.class, metaDataMap);
    }

    public untokenize_sentence_result() {
    }

    public untokenize_sentence_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public untokenize_sentence_result(untokenize_sentence_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public untokenize_sentence_result deepCopy() {
      return new untokenize_sentence_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public untokenize_sentence_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof untokenize_sentence_result)
        return this.equals((untokenize_sentence_result)that);
      return false;
    }

    public boolean equals(untokenize_sentence_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(untokenize_sentence_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("untokenize_sentence_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class untokenize_sentence_resultStandardSchemeFactory implements SchemeFactory {
      public untokenize_sentence_resultStandardScheme getScheme() {
        return new untokenize_sentence_resultStandardScheme();
      }
    }

    private static class untokenize_sentence_resultStandardScheme extends StandardScheme<untokenize_sentence_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, untokenize_sentence_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, untokenize_sentence_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class untokenize_sentence_resultTupleSchemeFactory implements SchemeFactory {
      public untokenize_sentence_resultTupleScheme getScheme() {
        return new untokenize_sentence_resultTupleScheme();
      }
    }

    private static class untokenize_sentence_resultTupleScheme extends TupleScheme<untokenize_sentence_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, untokenize_sentence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, untokenize_sentence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class tokenize_text_args implements org.apache.thrift.TBase<tokenize_text_args, tokenize_text_args._Fields>, java.io.Serializable, Cloneable, Comparable<tokenize_text_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tokenize_text_args");

    private static final org.apache.thrift.protocol.TField ARBITRARY_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("arbitraryText", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tokenize_text_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tokenize_text_argsTupleSchemeFactory());
    }

    public String arbitraryText; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARBITRARY_TEXT((short)1, "arbitraryText");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARBITRARY_TEXT
            return ARBITRARY_TEXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARBITRARY_TEXT, new org.apache.thrift.meta_data.FieldMetaData("arbitraryText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tokenize_text_args.class, metaDataMap);
    }

    public tokenize_text_args() {
    }

    public tokenize_text_args(
      String arbitraryText)
    {
      this();
      this.arbitraryText = arbitraryText;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tokenize_text_args(tokenize_text_args other) {
      if (other.isSetArbitraryText()) {
        this.arbitraryText = other.arbitraryText;
      }
    }

    public tokenize_text_args deepCopy() {
      return new tokenize_text_args(this);
    }

    @Override
    public void clear() {
      this.arbitraryText = null;
    }

    public String getArbitraryText() {
      return this.arbitraryText;
    }

    public tokenize_text_args setArbitraryText(String arbitraryText) {
      this.arbitraryText = arbitraryText;
      return this;
    }

    public void unsetArbitraryText() {
      this.arbitraryText = null;
    }

    /** Returns true if field arbitraryText is set (has been assigned a value) and false otherwise */
    public boolean isSetArbitraryText() {
      return this.arbitraryText != null;
    }

    public void setArbitraryTextIsSet(boolean value) {
      if (!value) {
        this.arbitraryText = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARBITRARY_TEXT:
        if (value == null) {
          unsetArbitraryText();
        } else {
          setArbitraryText((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARBITRARY_TEXT:
        return getArbitraryText();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARBITRARY_TEXT:
        return isSetArbitraryText();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tokenize_text_args)
        return this.equals((tokenize_text_args)that);
      return false;
    }

    public boolean equals(tokenize_text_args that) {
      if (that == null)
        return false;

      boolean this_present_arbitraryText = true && this.isSetArbitraryText();
      boolean that_present_arbitraryText = true && that.isSetArbitraryText();
      if (this_present_arbitraryText || that_present_arbitraryText) {
        if (!(this_present_arbitraryText && that_present_arbitraryText))
          return false;
        if (!this.arbitraryText.equals(that.arbitraryText))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_arbitraryText = true && (isSetArbitraryText());
      list.add(present_arbitraryText);
      if (present_arbitraryText)
        list.add(arbitraryText);

      return list.hashCode();
    }

    @Override
    public int compareTo(tokenize_text_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArbitraryText()).compareTo(other.isSetArbitraryText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArbitraryText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arbitraryText, other.arbitraryText);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tokenize_text_args(");
      boolean first = true;

      sb.append("arbitraryText:");
      if (this.arbitraryText == null) {
        sb.append("null");
      } else {
        sb.append(this.arbitraryText);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tokenize_text_argsStandardSchemeFactory implements SchemeFactory {
      public tokenize_text_argsStandardScheme getScheme() {
        return new tokenize_text_argsStandardScheme();
      }
    }

    private static class tokenize_text_argsStandardScheme extends StandardScheme<tokenize_text_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tokenize_text_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARBITRARY_TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.arbitraryText = iprot.readString();
                struct.setArbitraryTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tokenize_text_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arbitraryText != null) {
          oprot.writeFieldBegin(ARBITRARY_TEXT_FIELD_DESC);
          oprot.writeString(struct.arbitraryText);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tokenize_text_argsTupleSchemeFactory implements SchemeFactory {
      public tokenize_text_argsTupleScheme getScheme() {
        return new tokenize_text_argsTupleScheme();
      }
    }

    private static class tokenize_text_argsTupleScheme extends TupleScheme<tokenize_text_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tokenize_text_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArbitraryText()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetArbitraryText()) {
          oprot.writeString(struct.arbitraryText);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tokenize_text_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.arbitraryText = iprot.readString();
          struct.setArbitraryTextIsSet(true);
        }
      }
    }

  }

  public static class tokenize_text_result implements org.apache.thrift.TBase<tokenize_text_result, tokenize_text_result._Fields>, java.io.Serializable, Cloneable, Comparable<tokenize_text_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("tokenize_text_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new tokenize_text_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new tokenize_text_resultTupleSchemeFactory());
    }

    public List<List<String>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tokenize_text_result.class, metaDataMap);
    }

    public tokenize_text_result() {
    }

    public tokenize_text_result(
      List<List<String>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tokenize_text_result(tokenize_text_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>(other.success.size());
        for (List<String> other_element : other.success) {
          List<String> __this__success_copy = new ArrayList<String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public tokenize_text_result deepCopy() {
      return new tokenize_text_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public tokenize_text_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tokenize_text_result)
        return this.equals((tokenize_text_result)that);
      return false;
    }

    public boolean equals(tokenize_text_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(tokenize_text_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("tokenize_text_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class tokenize_text_resultStandardSchemeFactory implements SchemeFactory {
      public tokenize_text_resultStandardScheme getScheme() {
        return new tokenize_text_resultStandardScheme();
      }
    }

    private static class tokenize_text_resultStandardScheme extends StandardScheme<tokenize_text_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, tokenize_text_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                  struct.success = new ArrayList<List<String>>(_list176.size);
                  List<String> _elem177;
                  for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                  {
                    {
                      org.apache.thrift.protocol.TList _list179 = iprot.readListBegin();
                      _elem177 = new ArrayList<String>(_list179.size);
                      String _elem180;
                      for (int _i181 = 0; _i181 < _list179.size; ++_i181)
                      {
                        _elem180 = iprot.readString();
                        _elem177.add(_elem180);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem177);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, tokenize_text_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<String> _iter182 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter182.size()));
                for (String _iter183 : _iter182)
                {
                  oprot.writeString(_iter183);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class tokenize_text_resultTupleSchemeFactory implements SchemeFactory {
      public tokenize_text_resultTupleScheme getScheme() {
        return new tokenize_text_resultTupleScheme();
      }
    }

    private static class tokenize_text_resultTupleScheme extends TupleScheme<tokenize_text_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, tokenize_text_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<String> _iter184 : struct.success)
            {
              {
                oprot.writeI32(_iter184.size());
                for (String _iter185 : _iter184)
                {
                  oprot.writeString(_iter185);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, tokenize_text_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list186 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<String>>(_list186.size);
            List<String> _elem187;
            for (int _i188 = 0; _i188 < _list186.size; ++_i188)
            {
              {
                org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem187 = new ArrayList<String>(_list189.size);
                String _elem190;
                for (int _i191 = 0; _i191 < _list189.size; ++_i191)
                {
                  _elem190 = iprot.readString();
                  _elem187.add(_elem190);
                }
              }
              struct.success.add(_elem187);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sr_parse_tagged_sentence_args implements org.apache.thrift.TBase<sr_parse_tagged_sentence_args, sr_parse_tagged_sentence_args._Fields>, java.io.Serializable, Cloneable, Comparable<sr_parse_tagged_sentence_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sr_parse_tagged_sentence_args");

    private static final org.apache.thrift.protocol.TField TAGGED_SENTENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("taggedSentence", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OUTPUT_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("outputFormat", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField DIVIDER_FIELD_DESC = new org.apache.thrift.protocol.TField("divider", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sr_parse_tagged_sentence_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sr_parse_tagged_sentence_argsTupleSchemeFactory());
    }

    public String taggedSentence; // required
    public List<String> outputFormat; // required
    public String divider; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAGGED_SENTENCE((short)1, "taggedSentence"),
      OUTPUT_FORMAT((short)2, "outputFormat"),
      DIVIDER((short)3, "divider");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAGGED_SENTENCE
            return TAGGED_SENTENCE;
          case 2: // OUTPUT_FORMAT
            return OUTPUT_FORMAT;
          case 3: // DIVIDER
            return DIVIDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAGGED_SENTENCE, new org.apache.thrift.meta_data.FieldMetaData("taggedSentence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("outputFormat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.DIVIDER, new org.apache.thrift.meta_data.FieldMetaData("divider", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sr_parse_tagged_sentence_args.class, metaDataMap);
    }

    public sr_parse_tagged_sentence_args() {
    }

    public sr_parse_tagged_sentence_args(
      String taggedSentence,
      List<String> outputFormat,
      String divider)
    {
      this();
      this.taggedSentence = taggedSentence;
      this.outputFormat = outputFormat;
      this.divider = divider;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sr_parse_tagged_sentence_args(sr_parse_tagged_sentence_args other) {
      if (other.isSetTaggedSentence()) {
        this.taggedSentence = other.taggedSentence;
      }
      if (other.isSetOutputFormat()) {
        List<String> __this__outputFormat = new ArrayList<String>(other.outputFormat);
        this.outputFormat = __this__outputFormat;
      }
      if (other.isSetDivider()) {
        this.divider = other.divider;
      }
    }

    public sr_parse_tagged_sentence_args deepCopy() {
      return new sr_parse_tagged_sentence_args(this);
    }

    @Override
    public void clear() {
      this.taggedSentence = null;
      this.outputFormat = null;
      this.divider = null;
    }

    public String getTaggedSentence() {
      return this.taggedSentence;
    }

    public sr_parse_tagged_sentence_args setTaggedSentence(String taggedSentence) {
      this.taggedSentence = taggedSentence;
      return this;
    }

    public void unsetTaggedSentence() {
      this.taggedSentence = null;
    }

    /** Returns true if field taggedSentence is set (has been assigned a value) and false otherwise */
    public boolean isSetTaggedSentence() {
      return this.taggedSentence != null;
    }

    public void setTaggedSentenceIsSet(boolean value) {
      if (!value) {
        this.taggedSentence = null;
      }
    }

    public int getOutputFormatSize() {
      return (this.outputFormat == null) ? 0 : this.outputFormat.size();
    }

    public java.util.Iterator<String> getOutputFormatIterator() {
      return (this.outputFormat == null) ? null : this.outputFormat.iterator();
    }

    public void addToOutputFormat(String elem) {
      if (this.outputFormat == null) {
        this.outputFormat = new ArrayList<String>();
      }
      this.outputFormat.add(elem);
    }

    public List<String> getOutputFormat() {
      return this.outputFormat;
    }

    public sr_parse_tagged_sentence_args setOutputFormat(List<String> outputFormat) {
      this.outputFormat = outputFormat;
      return this;
    }

    public void unsetOutputFormat() {
      this.outputFormat = null;
    }

    /** Returns true if field outputFormat is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputFormat() {
      return this.outputFormat != null;
    }

    public void setOutputFormatIsSet(boolean value) {
      if (!value) {
        this.outputFormat = null;
      }
    }

    public String getDivider() {
      return this.divider;
    }

    public sr_parse_tagged_sentence_args setDivider(String divider) {
      this.divider = divider;
      return this;
    }

    public void unsetDivider() {
      this.divider = null;
    }

    /** Returns true if field divider is set (has been assigned a value) and false otherwise */
    public boolean isSetDivider() {
      return this.divider != null;
    }

    public void setDividerIsSet(boolean value) {
      if (!value) {
        this.divider = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAGGED_SENTENCE:
        if (value == null) {
          unsetTaggedSentence();
        } else {
          setTaggedSentence((String)value);
        }
        break;

      case OUTPUT_FORMAT:
        if (value == null) {
          unsetOutputFormat();
        } else {
          setOutputFormat((List<String>)value);
        }
        break;

      case DIVIDER:
        if (value == null) {
          unsetDivider();
        } else {
          setDivider((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAGGED_SENTENCE:
        return getTaggedSentence();

      case OUTPUT_FORMAT:
        return getOutputFormat();

      case DIVIDER:
        return getDivider();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAGGED_SENTENCE:
        return isSetTaggedSentence();
      case OUTPUT_FORMAT:
        return isSetOutputFormat();
      case DIVIDER:
        return isSetDivider();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sr_parse_tagged_sentence_args)
        return this.equals((sr_parse_tagged_sentence_args)that);
      return false;
    }

    public boolean equals(sr_parse_tagged_sentence_args that) {
      if (that == null)
        return false;

      boolean this_present_taggedSentence = true && this.isSetTaggedSentence();
      boolean that_present_taggedSentence = true && that.isSetTaggedSentence();
      if (this_present_taggedSentence || that_present_taggedSentence) {
        if (!(this_present_taggedSentence && that_present_taggedSentence))
          return false;
        if (!this.taggedSentence.equals(that.taggedSentence))
          return false;
      }

      boolean this_present_outputFormat = true && this.isSetOutputFormat();
      boolean that_present_outputFormat = true && that.isSetOutputFormat();
      if (this_present_outputFormat || that_present_outputFormat) {
        if (!(this_present_outputFormat && that_present_outputFormat))
          return false;
        if (!this.outputFormat.equals(that.outputFormat))
          return false;
      }

      boolean this_present_divider = true && this.isSetDivider();
      boolean that_present_divider = true && that.isSetDivider();
      if (this_present_divider || that_present_divider) {
        if (!(this_present_divider && that_present_divider))
          return false;
        if (!this.divider.equals(that.divider))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_taggedSentence = true && (isSetTaggedSentence());
      list.add(present_taggedSentence);
      if (present_taggedSentence)
        list.add(taggedSentence);

      boolean present_outputFormat = true && (isSetOutputFormat());
      list.add(present_outputFormat);
      if (present_outputFormat)
        list.add(outputFormat);

      boolean present_divider = true && (isSetDivider());
      list.add(present_divider);
      if (present_divider)
        list.add(divider);

      return list.hashCode();
    }

    @Override
    public int compareTo(sr_parse_tagged_sentence_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaggedSentence()).compareTo(other.isSetTaggedSentence());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaggedSentence()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taggedSentence, other.taggedSentence);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutputFormat()).compareTo(other.isSetOutputFormat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputFormat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputFormat, other.outputFormat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDivider()).compareTo(other.isSetDivider());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDivider()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.divider, other.divider);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sr_parse_tagged_sentence_args(");
      boolean first = true;

      sb.append("taggedSentence:");
      if (this.taggedSentence == null) {
        sb.append("null");
      } else {
        sb.append(this.taggedSentence);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputFormat:");
      if (this.outputFormat == null) {
        sb.append("null");
      } else {
        sb.append(this.outputFormat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("divider:");
      if (this.divider == null) {
        sb.append("null");
      } else {
        sb.append(this.divider);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sr_parse_tagged_sentence_argsStandardSchemeFactory implements SchemeFactory {
      public sr_parse_tagged_sentence_argsStandardScheme getScheme() {
        return new sr_parse_tagged_sentence_argsStandardScheme();
      }
    }

    private static class sr_parse_tagged_sentence_argsStandardScheme extends StandardScheme<sr_parse_tagged_sentence_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sr_parse_tagged_sentence_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TAGGED_SENTENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.taggedSentence = iprot.readString();
                struct.setTaggedSentenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTPUT_FORMAT
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                  struct.outputFormat = new ArrayList<String>(_list192.size);
                  String _elem193;
                  for (int _i194 = 0; _i194 < _list192.size; ++_i194)
                  {
                    _elem193 = iprot.readString();
                    struct.outputFormat.add(_elem193);
                  }
                  iprot.readListEnd();
                }
                struct.setOutputFormatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DIVIDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.divider = iprot.readString();
                struct.setDividerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sr_parse_tagged_sentence_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.taggedSentence != null) {
          oprot.writeFieldBegin(TAGGED_SENTENCE_FIELD_DESC);
          oprot.writeString(struct.taggedSentence);
          oprot.writeFieldEnd();
        }
        if (struct.outputFormat != null) {
          oprot.writeFieldBegin(OUTPUT_FORMAT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.outputFormat.size()));
            for (String _iter195 : struct.outputFormat)
            {
              oprot.writeString(_iter195);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.divider != null) {
          oprot.writeFieldBegin(DIVIDER_FIELD_DESC);
          oprot.writeString(struct.divider);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sr_parse_tagged_sentence_argsTupleSchemeFactory implements SchemeFactory {
      public sr_parse_tagged_sentence_argsTupleScheme getScheme() {
        return new sr_parse_tagged_sentence_argsTupleScheme();
      }
    }

    private static class sr_parse_tagged_sentence_argsTupleScheme extends TupleScheme<sr_parse_tagged_sentence_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sr_parse_tagged_sentence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaggedSentence()) {
          optionals.set(0);
        }
        if (struct.isSetOutputFormat()) {
          optionals.set(1);
        }
        if (struct.isSetDivider()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTaggedSentence()) {
          oprot.writeString(struct.taggedSentence);
        }
        if (struct.isSetOutputFormat()) {
          {
            oprot.writeI32(struct.outputFormat.size());
            for (String _iter196 : struct.outputFormat)
            {
              oprot.writeString(_iter196);
            }
          }
        }
        if (struct.isSetDivider()) {
          oprot.writeString(struct.divider);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sr_parse_tagged_sentence_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.taggedSentence = iprot.readString();
          struct.setTaggedSentenceIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.outputFormat = new ArrayList<String>(_list197.size);
            String _elem198;
            for (int _i199 = 0; _i199 < _list197.size; ++_i199)
            {
              _elem198 = iprot.readString();
              struct.outputFormat.add(_elem198);
            }
          }
          struct.setOutputFormatIsSet(true);
        }
        if (incoming.get(2)) {
          struct.divider = iprot.readString();
          struct.setDividerIsSet(true);
        }
      }
    }

  }

  public static class sr_parse_tagged_sentence_result implements org.apache.thrift.TBase<sr_parse_tagged_sentence_result, sr_parse_tagged_sentence_result._Fields>, java.io.Serializable, Cloneable, Comparable<sr_parse_tagged_sentence_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sr_parse_tagged_sentence_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sr_parse_tagged_sentence_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sr_parse_tagged_sentence_resultTupleSchemeFactory());
    }

    public ParseTree success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ParseTree.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sr_parse_tagged_sentence_result.class, metaDataMap);
    }

    public sr_parse_tagged_sentence_result() {
    }

    public sr_parse_tagged_sentence_result(
      ParseTree success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sr_parse_tagged_sentence_result(sr_parse_tagged_sentence_result other) {
      if (other.isSetSuccess()) {
        this.success = new ParseTree(other.success);
      }
    }

    public sr_parse_tagged_sentence_result deepCopy() {
      return new sr_parse_tagged_sentence_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ParseTree getSuccess() {
      return this.success;
    }

    public sr_parse_tagged_sentence_result setSuccess(ParseTree success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ParseTree)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sr_parse_tagged_sentence_result)
        return this.equals((sr_parse_tagged_sentence_result)that);
      return false;
    }

    public boolean equals(sr_parse_tagged_sentence_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sr_parse_tagged_sentence_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sr_parse_tagged_sentence_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sr_parse_tagged_sentence_resultStandardSchemeFactory implements SchemeFactory {
      public sr_parse_tagged_sentence_resultStandardScheme getScheme() {
        return new sr_parse_tagged_sentence_resultStandardScheme();
      }
    }

    private static class sr_parse_tagged_sentence_resultStandardScheme extends StandardScheme<sr_parse_tagged_sentence_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sr_parse_tagged_sentence_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ParseTree();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sr_parse_tagged_sentence_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sr_parse_tagged_sentence_resultTupleSchemeFactory implements SchemeFactory {
      public sr_parse_tagged_sentence_resultTupleScheme getScheme() {
        return new sr_parse_tagged_sentence_resultTupleScheme();
      }
    }

    private static class sr_parse_tagged_sentence_resultTupleScheme extends TupleScheme<sr_parse_tagged_sentence_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sr_parse_tagged_sentence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sr_parse_tagged_sentence_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ParseTree();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sr_parse_text_args implements org.apache.thrift.TBase<sr_parse_text_args, sr_parse_text_args._Fields>, java.io.Serializable, Cloneable, Comparable<sr_parse_text_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sr_parse_text_args");

    private static final org.apache.thrift.protocol.TField UNTOKENIZED_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("untokenizedText", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OUTPUT_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("outputFormat", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sr_parse_text_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sr_parse_text_argsTupleSchemeFactory());
    }

    public String untokenizedText; // required
    public List<String> outputFormat; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNTOKENIZED_TEXT((short)1, "untokenizedText"),
      OUTPUT_FORMAT((short)2, "outputFormat");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNTOKENIZED_TEXT
            return UNTOKENIZED_TEXT;
          case 2: // OUTPUT_FORMAT
            return OUTPUT_FORMAT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNTOKENIZED_TEXT, new org.apache.thrift.meta_data.FieldMetaData("untokenizedText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("outputFormat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sr_parse_text_args.class, metaDataMap);
    }

    public sr_parse_text_args() {
    }

    public sr_parse_text_args(
      String untokenizedText,
      List<String> outputFormat)
    {
      this();
      this.untokenizedText = untokenizedText;
      this.outputFormat = outputFormat;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sr_parse_text_args(sr_parse_text_args other) {
      if (other.isSetUntokenizedText()) {
        this.untokenizedText = other.untokenizedText;
      }
      if (other.isSetOutputFormat()) {
        List<String> __this__outputFormat = new ArrayList<String>(other.outputFormat);
        this.outputFormat = __this__outputFormat;
      }
    }

    public sr_parse_text_args deepCopy() {
      return new sr_parse_text_args(this);
    }

    @Override
    public void clear() {
      this.untokenizedText = null;
      this.outputFormat = null;
    }

    public String getUntokenizedText() {
      return this.untokenizedText;
    }

    public sr_parse_text_args setUntokenizedText(String untokenizedText) {
      this.untokenizedText = untokenizedText;
      return this;
    }

    public void unsetUntokenizedText() {
      this.untokenizedText = null;
    }

    /** Returns true if field untokenizedText is set (has been assigned a value) and false otherwise */
    public boolean isSetUntokenizedText() {
      return this.untokenizedText != null;
    }

    public void setUntokenizedTextIsSet(boolean value) {
      if (!value) {
        this.untokenizedText = null;
      }
    }

    public int getOutputFormatSize() {
      return (this.outputFormat == null) ? 0 : this.outputFormat.size();
    }

    public java.util.Iterator<String> getOutputFormatIterator() {
      return (this.outputFormat == null) ? null : this.outputFormat.iterator();
    }

    public void addToOutputFormat(String elem) {
      if (this.outputFormat == null) {
        this.outputFormat = new ArrayList<String>();
      }
      this.outputFormat.add(elem);
    }

    public List<String> getOutputFormat() {
      return this.outputFormat;
    }

    public sr_parse_text_args setOutputFormat(List<String> outputFormat) {
      this.outputFormat = outputFormat;
      return this;
    }

    public void unsetOutputFormat() {
      this.outputFormat = null;
    }

    /** Returns true if field outputFormat is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputFormat() {
      return this.outputFormat != null;
    }

    public void setOutputFormatIsSet(boolean value) {
      if (!value) {
        this.outputFormat = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UNTOKENIZED_TEXT:
        if (value == null) {
          unsetUntokenizedText();
        } else {
          setUntokenizedText((String)value);
        }
        break;

      case OUTPUT_FORMAT:
        if (value == null) {
          unsetOutputFormat();
        } else {
          setOutputFormat((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UNTOKENIZED_TEXT:
        return getUntokenizedText();

      case OUTPUT_FORMAT:
        return getOutputFormat();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UNTOKENIZED_TEXT:
        return isSetUntokenizedText();
      case OUTPUT_FORMAT:
        return isSetOutputFormat();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sr_parse_text_args)
        return this.equals((sr_parse_text_args)that);
      return false;
    }

    public boolean equals(sr_parse_text_args that) {
      if (that == null)
        return false;

      boolean this_present_untokenizedText = true && this.isSetUntokenizedText();
      boolean that_present_untokenizedText = true && that.isSetUntokenizedText();
      if (this_present_untokenizedText || that_present_untokenizedText) {
        if (!(this_present_untokenizedText && that_present_untokenizedText))
          return false;
        if (!this.untokenizedText.equals(that.untokenizedText))
          return false;
      }

      boolean this_present_outputFormat = true && this.isSetOutputFormat();
      boolean that_present_outputFormat = true && that.isSetOutputFormat();
      if (this_present_outputFormat || that_present_outputFormat) {
        if (!(this_present_outputFormat && that_present_outputFormat))
          return false;
        if (!this.outputFormat.equals(that.outputFormat))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_untokenizedText = true && (isSetUntokenizedText());
      list.add(present_untokenizedText);
      if (present_untokenizedText)
        list.add(untokenizedText);

      boolean present_outputFormat = true && (isSetOutputFormat());
      list.add(present_outputFormat);
      if (present_outputFormat)
        list.add(outputFormat);

      return list.hashCode();
    }

    @Override
    public int compareTo(sr_parse_text_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUntokenizedText()).compareTo(other.isSetUntokenizedText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUntokenizedText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.untokenizedText, other.untokenizedText);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutputFormat()).compareTo(other.isSetOutputFormat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputFormat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputFormat, other.outputFormat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sr_parse_text_args(");
      boolean first = true;

      sb.append("untokenizedText:");
      if (this.untokenizedText == null) {
        sb.append("null");
      } else {
        sb.append(this.untokenizedText);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputFormat:");
      if (this.outputFormat == null) {
        sb.append("null");
      } else {
        sb.append(this.outputFormat);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sr_parse_text_argsStandardSchemeFactory implements SchemeFactory {
      public sr_parse_text_argsStandardScheme getScheme() {
        return new sr_parse_text_argsStandardScheme();
      }
    }

    private static class sr_parse_text_argsStandardScheme extends StandardScheme<sr_parse_text_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sr_parse_text_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNTOKENIZED_TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.untokenizedText = iprot.readString();
                struct.setUntokenizedTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTPUT_FORMAT
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                  struct.outputFormat = new ArrayList<String>(_list200.size);
                  String _elem201;
                  for (int _i202 = 0; _i202 < _list200.size; ++_i202)
                  {
                    _elem201 = iprot.readString();
                    struct.outputFormat.add(_elem201);
                  }
                  iprot.readListEnd();
                }
                struct.setOutputFormatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sr_parse_text_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.untokenizedText != null) {
          oprot.writeFieldBegin(UNTOKENIZED_TEXT_FIELD_DESC);
          oprot.writeString(struct.untokenizedText);
          oprot.writeFieldEnd();
        }
        if (struct.outputFormat != null) {
          oprot.writeFieldBegin(OUTPUT_FORMAT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.outputFormat.size()));
            for (String _iter203 : struct.outputFormat)
            {
              oprot.writeString(_iter203);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sr_parse_text_argsTupleSchemeFactory implements SchemeFactory {
      public sr_parse_text_argsTupleScheme getScheme() {
        return new sr_parse_text_argsTupleScheme();
      }
    }

    private static class sr_parse_text_argsTupleScheme extends TupleScheme<sr_parse_text_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sr_parse_text_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUntokenizedText()) {
          optionals.set(0);
        }
        if (struct.isSetOutputFormat()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUntokenizedText()) {
          oprot.writeString(struct.untokenizedText);
        }
        if (struct.isSetOutputFormat()) {
          {
            oprot.writeI32(struct.outputFormat.size());
            for (String _iter204 : struct.outputFormat)
            {
              oprot.writeString(_iter204);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sr_parse_text_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.untokenizedText = iprot.readString();
          struct.setUntokenizedTextIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.outputFormat = new ArrayList<String>(_list205.size);
            String _elem206;
            for (int _i207 = 0; _i207 < _list205.size; ++_i207)
            {
              _elem206 = iprot.readString();
              struct.outputFormat.add(_elem206);
            }
          }
          struct.setOutputFormatIsSet(true);
        }
      }
    }

  }

  public static class sr_parse_text_result implements org.apache.thrift.TBase<sr_parse_text_result, sr_parse_text_result._Fields>, java.io.Serializable, Cloneable, Comparable<sr_parse_text_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sr_parse_text_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sr_parse_text_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sr_parse_text_resultTupleSchemeFactory());
    }

    public List<ParseTree> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ParseTree.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sr_parse_text_result.class, metaDataMap);
    }

    public sr_parse_text_result() {
    }

    public sr_parse_text_result(
      List<ParseTree> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sr_parse_text_result(sr_parse_text_result other) {
      if (other.isSetSuccess()) {
        List<ParseTree> __this__success = new ArrayList<ParseTree>(other.success.size());
        for (ParseTree other_element : other.success) {
          __this__success.add(new ParseTree(other_element));
        }
        this.success = __this__success;
      }
    }

    public sr_parse_text_result deepCopy() {
      return new sr_parse_text_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ParseTree> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ParseTree elem) {
      if (this.success == null) {
        this.success = new ArrayList<ParseTree>();
      }
      this.success.add(elem);
    }

    public List<ParseTree> getSuccess() {
      return this.success;
    }

    public sr_parse_text_result setSuccess(List<ParseTree> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ParseTree>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sr_parse_text_result)
        return this.equals((sr_parse_text_result)that);
      return false;
    }

    public boolean equals(sr_parse_text_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sr_parse_text_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sr_parse_text_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sr_parse_text_resultStandardSchemeFactory implements SchemeFactory {
      public sr_parse_text_resultStandardScheme getScheme() {
        return new sr_parse_text_resultStandardScheme();
      }
    }

    private static class sr_parse_text_resultStandardScheme extends StandardScheme<sr_parse_text_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sr_parse_text_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                  struct.success = new ArrayList<ParseTree>(_list208.size);
                  ParseTree _elem209;
                  for (int _i210 = 0; _i210 < _list208.size; ++_i210)
                  {
                    _elem209 = new ParseTree();
                    _elem209.read(iprot);
                    struct.success.add(_elem209);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sr_parse_text_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ParseTree _iter211 : struct.success)
            {
              _iter211.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sr_parse_text_resultTupleSchemeFactory implements SchemeFactory {
      public sr_parse_text_resultTupleScheme getScheme() {
        return new sr_parse_text_resultTupleScheme();
      }
    }

    private static class sr_parse_text_resultTupleScheme extends TupleScheme<sr_parse_text_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sr_parse_text_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ParseTree _iter212 : struct.success)
            {
              _iter212.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sr_parse_text_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ParseTree>(_list213.size);
            ParseTree _elem214;
            for (int _i215 = 0; _i215 < _list213.size; ++_i215)
            {
              _elem214 = new ParseTree();
              _elem214.read(iprot);
              struct.success.add(_elem214);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sr_parse_tokens_args implements org.apache.thrift.TBase<sr_parse_tokens_args, sr_parse_tokens_args._Fields>, java.io.Serializable, Cloneable, Comparable<sr_parse_tokens_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sr_parse_tokens_args");

    private static final org.apache.thrift.protocol.TField TOKENIZED_SENTENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenizedSentence", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField OUTPUT_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("outputFormat", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sr_parse_tokens_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sr_parse_tokens_argsTupleSchemeFactory());
    }

    public List<String> tokenizedSentence; // required
    public List<String> outputFormat; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKENIZED_SENTENCE((short)1, "tokenizedSentence"),
      OUTPUT_FORMAT((short)2, "outputFormat");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKENIZED_SENTENCE
            return TOKENIZED_SENTENCE;
          case 2: // OUTPUT_FORMAT
            return OUTPUT_FORMAT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKENIZED_SENTENCE, new org.apache.thrift.meta_data.FieldMetaData("tokenizedSentence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OUTPUT_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("outputFormat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sr_parse_tokens_args.class, metaDataMap);
    }

    public sr_parse_tokens_args() {
    }

    public sr_parse_tokens_args(
      List<String> tokenizedSentence,
      List<String> outputFormat)
    {
      this();
      this.tokenizedSentence = tokenizedSentence;
      this.outputFormat = outputFormat;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sr_parse_tokens_args(sr_parse_tokens_args other) {
      if (other.isSetTokenizedSentence()) {
        List<String> __this__tokenizedSentence = new ArrayList<String>(other.tokenizedSentence);
        this.tokenizedSentence = __this__tokenizedSentence;
      }
      if (other.isSetOutputFormat()) {
        List<String> __this__outputFormat = new ArrayList<String>(other.outputFormat);
        this.outputFormat = __this__outputFormat;
      }
    }

    public sr_parse_tokens_args deepCopy() {
      return new sr_parse_tokens_args(this);
    }

    @Override
    public void clear() {
      this.tokenizedSentence = null;
      this.outputFormat = null;
    }

    public int getTokenizedSentenceSize() {
      return (this.tokenizedSentence == null) ? 0 : this.tokenizedSentence.size();
    }

    public java.util.Iterator<String> getTokenizedSentenceIterator() {
      return (this.tokenizedSentence == null) ? null : this.tokenizedSentence.iterator();
    }

    public void addToTokenizedSentence(String elem) {
      if (this.tokenizedSentence == null) {
        this.tokenizedSentence = new ArrayList<String>();
      }
      this.tokenizedSentence.add(elem);
    }

    public List<String> getTokenizedSentence() {
      return this.tokenizedSentence;
    }

    public sr_parse_tokens_args setTokenizedSentence(List<String> tokenizedSentence) {
      this.tokenizedSentence = tokenizedSentence;
      return this;
    }

    public void unsetTokenizedSentence() {
      this.tokenizedSentence = null;
    }

    /** Returns true if field tokenizedSentence is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenizedSentence() {
      return this.tokenizedSentence != null;
    }

    public void setTokenizedSentenceIsSet(boolean value) {
      if (!value) {
        this.tokenizedSentence = null;
      }
    }

    public int getOutputFormatSize() {
      return (this.outputFormat == null) ? 0 : this.outputFormat.size();
    }

    public java.util.Iterator<String> getOutputFormatIterator() {
      return (this.outputFormat == null) ? null : this.outputFormat.iterator();
    }

    public void addToOutputFormat(String elem) {
      if (this.outputFormat == null) {
        this.outputFormat = new ArrayList<String>();
      }
      this.outputFormat.add(elem);
    }

    public List<String> getOutputFormat() {
      return this.outputFormat;
    }

    public sr_parse_tokens_args setOutputFormat(List<String> outputFormat) {
      this.outputFormat = outputFormat;
      return this;
    }

    public void unsetOutputFormat() {
      this.outputFormat = null;
    }

    /** Returns true if field outputFormat is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputFormat() {
      return this.outputFormat != null;
    }

    public void setOutputFormatIsSet(boolean value) {
      if (!value) {
        this.outputFormat = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKENIZED_SENTENCE:
        if (value == null) {
          unsetTokenizedSentence();
        } else {
          setTokenizedSentence((List<String>)value);
        }
        break;

      case OUTPUT_FORMAT:
        if (value == null) {
          unsetOutputFormat();
        } else {
          setOutputFormat((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKENIZED_SENTENCE:
        return getTokenizedSentence();

      case OUTPUT_FORMAT:
        return getOutputFormat();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKENIZED_SENTENCE:
        return isSetTokenizedSentence();
      case OUTPUT_FORMAT:
        return isSetOutputFormat();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sr_parse_tokens_args)
        return this.equals((sr_parse_tokens_args)that);
      return false;
    }

    public boolean equals(sr_parse_tokens_args that) {
      if (that == null)
        return false;

      boolean this_present_tokenizedSentence = true && this.isSetTokenizedSentence();
      boolean that_present_tokenizedSentence = true && that.isSetTokenizedSentence();
      if (this_present_tokenizedSentence || that_present_tokenizedSentence) {
        if (!(this_present_tokenizedSentence && that_present_tokenizedSentence))
          return false;
        if (!this.tokenizedSentence.equals(that.tokenizedSentence))
          return false;
      }

      boolean this_present_outputFormat = true && this.isSetOutputFormat();
      boolean that_present_outputFormat = true && that.isSetOutputFormat();
      if (this_present_outputFormat || that_present_outputFormat) {
        if (!(this_present_outputFormat && that_present_outputFormat))
          return false;
        if (!this.outputFormat.equals(that.outputFormat))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tokenizedSentence = true && (isSetTokenizedSentence());
      list.add(present_tokenizedSentence);
      if (present_tokenizedSentence)
        list.add(tokenizedSentence);

      boolean present_outputFormat = true && (isSetOutputFormat());
      list.add(present_outputFormat);
      if (present_outputFormat)
        list.add(outputFormat);

      return list.hashCode();
    }

    @Override
    public int compareTo(sr_parse_tokens_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTokenizedSentence()).compareTo(other.isSetTokenizedSentence());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenizedSentence()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenizedSentence, other.tokenizedSentence);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutputFormat()).compareTo(other.isSetOutputFormat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputFormat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputFormat, other.outputFormat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sr_parse_tokens_args(");
      boolean first = true;

      sb.append("tokenizedSentence:");
      if (this.tokenizedSentence == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenizedSentence);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputFormat:");
      if (this.outputFormat == null) {
        sb.append("null");
      } else {
        sb.append(this.outputFormat);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sr_parse_tokens_argsStandardSchemeFactory implements SchemeFactory {
      public sr_parse_tokens_argsStandardScheme getScheme() {
        return new sr_parse_tokens_argsStandardScheme();
      }
    }

    private static class sr_parse_tokens_argsStandardScheme extends StandardScheme<sr_parse_tokens_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sr_parse_tokens_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKENIZED_SENTENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                  struct.tokenizedSentence = new ArrayList<String>(_list216.size);
                  String _elem217;
                  for (int _i218 = 0; _i218 < _list216.size; ++_i218)
                  {
                    _elem217 = iprot.readString();
                    struct.tokenizedSentence.add(_elem217);
                  }
                  iprot.readListEnd();
                }
                struct.setTokenizedSentenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTPUT_FORMAT
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list219 = iprot.readListBegin();
                  struct.outputFormat = new ArrayList<String>(_list219.size);
                  String _elem220;
                  for (int _i221 = 0; _i221 < _list219.size; ++_i221)
                  {
                    _elem220 = iprot.readString();
                    struct.outputFormat.add(_elem220);
                  }
                  iprot.readListEnd();
                }
                struct.setOutputFormatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sr_parse_tokens_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tokenizedSentence != null) {
          oprot.writeFieldBegin(TOKENIZED_SENTENCE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tokenizedSentence.size()));
            for (String _iter222 : struct.tokenizedSentence)
            {
              oprot.writeString(_iter222);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.outputFormat != null) {
          oprot.writeFieldBegin(OUTPUT_FORMAT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.outputFormat.size()));
            for (String _iter223 : struct.outputFormat)
            {
              oprot.writeString(_iter223);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sr_parse_tokens_argsTupleSchemeFactory implements SchemeFactory {
      public sr_parse_tokens_argsTupleScheme getScheme() {
        return new sr_parse_tokens_argsTupleScheme();
      }
    }

    private static class sr_parse_tokens_argsTupleScheme extends TupleScheme<sr_parse_tokens_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sr_parse_tokens_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTokenizedSentence()) {
          optionals.set(0);
        }
        if (struct.isSetOutputFormat()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTokenizedSentence()) {
          {
            oprot.writeI32(struct.tokenizedSentence.size());
            for (String _iter224 : struct.tokenizedSentence)
            {
              oprot.writeString(_iter224);
            }
          }
        }
        if (struct.isSetOutputFormat()) {
          {
            oprot.writeI32(struct.outputFormat.size());
            for (String _iter225 : struct.outputFormat)
            {
              oprot.writeString(_iter225);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sr_parse_tokens_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list226 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tokenizedSentence = new ArrayList<String>(_list226.size);
            String _elem227;
            for (int _i228 = 0; _i228 < _list226.size; ++_i228)
            {
              _elem227 = iprot.readString();
              struct.tokenizedSentence.add(_elem227);
            }
          }
          struct.setTokenizedSentenceIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list229 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.outputFormat = new ArrayList<String>(_list229.size);
            String _elem230;
            for (int _i231 = 0; _i231 < _list229.size; ++_i231)
            {
              _elem230 = iprot.readString();
              struct.outputFormat.add(_elem230);
            }
          }
          struct.setOutputFormatIsSet(true);
        }
      }
    }

  }

  public static class sr_parse_tokens_result implements org.apache.thrift.TBase<sr_parse_tokens_result, sr_parse_tokens_result._Fields>, java.io.Serializable, Cloneable, Comparable<sr_parse_tokens_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sr_parse_tokens_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sr_parse_tokens_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sr_parse_tokens_resultTupleSchemeFactory());
    }

    public ParseTree success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ParseTree.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sr_parse_tokens_result.class, metaDataMap);
    }

    public sr_parse_tokens_result() {
    }

    public sr_parse_tokens_result(
      ParseTree success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sr_parse_tokens_result(sr_parse_tokens_result other) {
      if (other.isSetSuccess()) {
        this.success = new ParseTree(other.success);
      }
    }

    public sr_parse_tokens_result deepCopy() {
      return new sr_parse_tokens_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ParseTree getSuccess() {
      return this.success;
    }

    public sr_parse_tokens_result setSuccess(ParseTree success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ParseTree)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sr_parse_tokens_result)
        return this.equals((sr_parse_tokens_result)that);
      return false;
    }

    public boolean equals(sr_parse_tokens_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sr_parse_tokens_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sr_parse_tokens_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sr_parse_tokens_resultStandardSchemeFactory implements SchemeFactory {
      public sr_parse_tokens_resultStandardScheme getScheme() {
        return new sr_parse_tokens_resultStandardScheme();
      }
    }

    private static class sr_parse_tokens_resultStandardScheme extends StandardScheme<sr_parse_tokens_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sr_parse_tokens_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ParseTree();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sr_parse_tokens_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sr_parse_tokens_resultTupleSchemeFactory implements SchemeFactory {
      public sr_parse_tokens_resultTupleScheme getScheme() {
        return new sr_parse_tokens_resultTupleScheme();
      }
    }

    private static class sr_parse_tokens_resultTupleScheme extends TupleScheme<sr_parse_tokens_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sr_parse_tokens_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sr_parse_tokens_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ParseTree();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
